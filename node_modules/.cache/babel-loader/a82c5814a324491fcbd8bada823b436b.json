{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"selected\", \"after\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from 'react';\nimport { getClassName } from \"../../helpers/getClassName\";\nimport Tappable from \"../Tappable/Tappable\";\nimport { classNames } from \"../../lib/classNames\";\nimport { VKCOM } from \"../../lib/platform\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { hasReactNode } from \"../../lib/utils\";\nimport { TabsModeContext } from \"../Tabs/Tabs\";\nimport Headline from \"../Typography/Headline/Headline\";\nimport Subhead from \"../Typography/Subhead/Subhead\";\nimport Text from \"../Typography/Text/Text\";\n\nvar TabsItem = function TabsItem(_ref) {\n  var children = _ref.children,\n      selected = _ref.selected,\n      after = _ref.after,\n      restProps = _objectWithoutProperties(_ref, _excluded);\n\n  var platform = usePlatform();\n  var mode = React.useContext(TabsModeContext);\n  var TypographyComponent = mode === 'buttons' || mode === 'segmented' ? Subhead : Headline;\n\n  if (platform === VKCOM) {\n    TypographyComponent = Text;\n  }\n\n  return createScopedElement(Tappable, _extends({}, restProps, {\n    vkuiClass: classNames(getClassName('TabsItem', platform), {\n      'TabsItem--selected': selected\n    }),\n    hasActive: mode === 'segmented',\n    activeMode: \"TabsItem--active\",\n    focusVisibleMode: mode === 'segmented' ? 'outside' : 'inside'\n  }), createScopedElement(TypographyComponent, {\n    Component: \"span\",\n    vkuiClass: \"TabsItem__in\",\n    weight: \"medium\"\n  }, children), hasReactNode(after) && createScopedElement(\"div\", {\n    vkuiClass: \"TabsItem__after\"\n  }, after));\n};\n\nTabsItem.defaultProps = {\n  selected: false\n};\nexport default TabsItem;","map":{"version":3,"sources":["../../../src/components/TabsItem/TabsItem.tsx"],"names":["TabsItem","children","selected","after","restProps","platform","usePlatform","mode","React","TypographyComponent","classNames","getClassName","hasReactNode"],"mappings":";;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,YAAA,QAAA,4BAAA;AACA,OAAA,QAAA,MAAA,sBAAA;AACA,SAAA,UAAA,QAAA,sBAAA;AACA,SAAA,KAAA,QAAA,oBAAA;AACA,SAAA,WAAA,QAAA,yBAAA;AACA,SAAA,YAAA,QAAA,iBAAA;AACA,SAAA,eAAA,QAAA,cAAA;AACA,OAAA,QAAA,MAAA,iCAAA;AACA,OAAA,OAAA,MAAA,+BAAA;AACA,OAAA,IAAA,MAAA,yBAAA;;AAQA,IAAMA,QAAiC,GAAG,SAApCA,QAAoC,CAAA,IAAA,EAKrB;AAAA,MAJnBC,QAImB,GAAA,IAAA,CAJnBA,QAImB;AAAA,MAHnBC,QAGmB,GAAA,IAAA,CAHnBA,QAGmB;AAAA,MAFnBC,KAEmB,GAAA,IAAA,CAFnBA,KAEmB;AAAA,MADhBC,SACgB,GAAA,wBAAA,CAAA,IAAA,EAAA,SAAA,CAAA;;AACnB,MAAMC,QAAQ,GAAGC,WAAjB,EAAA;AACA,MAAMC,IAAuB,GAAGC,KAAK,CAALA,UAAAA,CAAhC,eAAgCA,CAAhC;AAEA,MAAIC,mBAAmB,GAAGF,IAAI,KAAJA,SAAAA,IAAsBA,IAAI,KAA1BA,WAAAA,GAAAA,OAAAA,GAA1B,QAAA;;AAIA,MAAIF,QAAQ,KAAZ,KAAA,EAAwB;AACtBI,IAAAA,mBAAmB,GAAnBA,IAAAA;AACD;;AAED,SACE,mBAAA,CAAA,QAAA,EAAA,QAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AAEE,IAAA,SAAS,EAAEC,UAAU,CAACC,YAAY,CAAA,UAAA,EAAb,QAAa,CAAb,EAAqC;AAAE,4BAAsBT;AAAxB,KAArC,CAFvB;AAGE,IAAA,SAAS,EAAEK,IAAI,KAHjB,WAAA;AAIE,IAAA,UAAU,EAJZ,kBAAA;AAKE,IAAA,gBAAgB,EAAEA,IAAI,KAAJA,WAAAA,GAAAA,SAAAA,GAAmC;AALvD,GAAA,CAAA,EAOE,mBAAA,CAAA,mBAAA,EAAA;AAAqB,IAAA,SAAS,EAA9B,MAAA;AAAsC,IAAA,SAAS,EAA/C,cAAA;AAA+D,IAAA,MAAM,EAAC;AAAtE,GAAA,EAPF,QAOE,CAPF,EAQGK,YAAY,CAAZA,KAAY,CAAZA,IAAuB,mBAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EAT5B,KAS4B,CAR1B,CADF;AAjBF,CAAA;;AA+BAZ,QAAQ,CAARA,YAAAA,GAAwB;AACtBE,EAAAA,QAAQ,EAAE;AADY,CAAxBF;AAIA,eAAA,QAAA","sourcesContent":["import * as React from 'react';\nimport { getClassName } from '../../helpers/getClassName';\nimport Tappable from '../Tappable/Tappable';\nimport { classNames } from '../../lib/classNames';\nimport { VKCOM } from '../../lib/platform';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { hasReactNode } from '../../lib/utils';\nimport { TabsProps, TabsModeContext } from '../Tabs/Tabs';\nimport Headline from '../Typography/Headline/Headline';\nimport Subhead from '../Typography/Subhead/Subhead';\nimport Text from '../Typography/Text/Text';\nimport './TabsItem.css';\n\nexport interface TabsItemProps extends React.HTMLAttributes<HTMLElement> {\n  after?: React.ReactNode;\n  selected?: boolean;\n}\n\nconst TabsItem: React.FC<TabsItemProps> = ({\n  children,\n  selected,\n  after,\n  ...restProps\n}: TabsItemProps) => {\n  const platform = usePlatform();\n  const mode: TabsProps['mode'] = React.useContext(TabsModeContext);\n\n  let TypographyComponent = mode === 'buttons' || mode === 'segmented'\n    ? Subhead\n    : Headline;\n\n  if (platform === VKCOM) {\n    TypographyComponent = Text;\n  }\n\n  return (\n    <Tappable\n      {...restProps}\n      vkuiClass={classNames(getClassName('TabsItem', platform), { 'TabsItem--selected': selected })}\n      hasActive={mode === 'segmented'}\n      activeMode=\"TabsItem--active\"\n      focusVisibleMode={mode === 'segmented' ? 'outside' : 'inside'}\n    >\n      <TypographyComponent Component=\"span\" vkuiClass=\"TabsItem__in\" weight=\"medium\">{children}</TypographyComponent>\n      {hasReactNode(after) && <div vkuiClass=\"TabsItem__after\">{after}</div>}\n    </Tappable>\n  );\n};\n\nTabsItem.defaultProps = {\n  selected: false,\n};\n\nexport default TabsItem;\n"]},"metadata":{},"sourceType":"module"}