{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nexport function useEnsuredControl(props, options) {\n  var isControlled = props.hasOwnProperty('value');\n\n  var _React$useState = React.useState(options.defaultValue),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      localValue = _React$useState2[0],\n      setLocalValue = _React$useState2[1];\n\n  var onChange = React.useCallback(function (e) {\n    !isControlled && setLocalValue(e.target.value);\n    props.onChange && props.onChange(e);\n  }, [props.onChange]);\n  return [isControlled ? props.value : localValue, onChange];\n}","map":{"version":3,"sources":["../../src/hooks/useEnsuredControl.ts"],"names":["isControlled","props","localValue","setLocalValue","React","options","onChange","e"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAO,SAAA,iBAAA,CAAA,KAAA,EAAA,OAAA,EAGe;AACpB,MAAMA,YAAY,GAAGC,KAAK,CAALA,cAAAA,CAArB,OAAqBA,CAArB;;AACA,MAAA,eAAA,GAAoCG,KAAK,CAALA,QAAAA,CAAeC,OAAO,CAA1D,YAAoCD,CAApC;AAAA,MAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;AAAA,MAAOF,UAAP,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MAAmBC,aAAnB,GAAA,gBAAA,CAAA,CAAA,CAAA;;AACA,MAAMG,QAAQ,GAAG,KAAK,CAAL,WAAA,CAAkB,UAAA,CAAA,EAAO;AACxC,KAAA,YAAA,IAAiBH,aAAa,CAACI,CAAC,CAADA,MAAAA,CAA/B,KAA8B,CAA9B;AACAN,IAAAA,KAAK,CAALA,QAAAA,IAAkBA,KAAK,CAALA,QAAAA,CAAlBA,CAAkBA,CAAlBA;AAFe,GAAA,EAGd,CAACA,KAAK,CAHT,QAGG,CAHc,CAAjB;AAIA,SAAO,CAACD,YAAY,GAAGC,KAAK,CAAR,KAAA,GAAb,UAAA,EAAP,QAAO,CAAP;AACD","sourcesContent":["import * as React from 'react';\n\nexport function useEnsuredControl<V, E>(\n  props: { value?: V; onChange?: (e: E) => any },\n  options: { defaultValue: V },\n): [V, (e: E) => any] {\n  const isControlled = props.hasOwnProperty('value');\n  const [localValue, setLocalValue] = React.useState(options.defaultValue);\n  const onChange = React.useCallback((e) => {\n    !isControlled && setLocalValue(e.target.value);\n    props.onChange && props.onChange(e);\n  }, [props.onChange]);\n  return [isControlled ? props.value : localValue, onChange];\n}\n"]},"metadata":{},"sourceType":"module"}