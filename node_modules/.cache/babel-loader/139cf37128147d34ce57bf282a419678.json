{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onChange\", \"defaultValue\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from 'react';\nimport { clamp } from \"../../helpers/math\";\nimport { UniversalSlider } from \"./UniversalSlider\";\n\nvar RangeSlider = function RangeSlider(_ref) {\n  var onChange = _ref.onChange,\n      defaultValue = _ref.defaultValue,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var isControlled = Boolean(props.value);\n\n  var _React$useState = React.useState(defaultValue || [props.min, props.max]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      localValue = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var _ref2 = props.value || localValue,\n      _ref3 = _slicedToArray(_ref2, 2),\n      start = _ref3[0],\n      end = _ref3[1];\n\n  var value = [clamp(start, props.min, props.max), clamp(end, props.min, props.max)];\n  var handleChange = React.useCallback(function (nextValue, event) {\n    if (props.disabled || value[0] === nextValue[0] && value[1] === nextValue[1]) {\n      return;\n    }\n\n    !isControlled && setValue(nextValue);\n    onChange && onChange(nextValue, event);\n  }, [onChange, isControlled, value]);\n  return createScopedElement(UniversalSlider, _extends({}, props, {\n    value: value,\n    onChange: handleChange\n  }));\n};\n\nRangeSlider.defaultProps = {\n  min: 0,\n  max: 100,\n  step: 0\n};\nexport default RangeSlider;","map":{"version":3,"sources":["../../../src/components/RangeSlider/RangeSlider.tsx"],"names":["RangeSlider","onChange","defaultValue","props","isControlled","Boolean","localValue","setValue","React","start","end","value","clamp","handleChange","nextValue","min","max","step"],"mappings":";;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,KAAA,QAAA,oBAAA;AACA,SAAA,eAAA,QAAA,mBAAA;;AAKA,IAAMA,WAAuC,GAAG,SAA1CA,WAA0C,CAAA,IAAA,EAA4D;AAAA,MAAzDC,QAAyD,GAAA,IAAA,CAAzDA,QAAyD;AAAA,MAA/CC,YAA+C,GAAA,IAAA,CAA/CA,YAA+C;AAAA,MAA9BC,KAA8B,GAAA,wBAAA,CAAA,IAAA,EAAA,SAAA,CAAA;;AAC1G,MAAMC,YAAY,GAAGC,OAAO,CAACF,KAAK,CAAlC,KAA4B,CAA5B;;AAEA,MAAA,eAAA,GAA+BK,KAAK,CAALA,QAAAA,CAAeN,YAAY,IAAI,CAACC,KAAK,CAAN,GAAA,EAAYA,KAAK,CAA/E,GAA8D,CAA/BK,CAA/B;AAAA,MAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;AAAA,MAAOF,UAAP,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MAAmBC,QAAnB,GAAA,gBAAA,CAAA,CAAA,CAAA;;AACA,MAAA,KAAA,GAAqBJ,KAAK,CAALA,KAAAA,IAArB,UAAA;AAAA,MAAA,KAAA,GAAA,cAAA,CAAA,KAAA,EAAA,CAAA,CAAA;AAAA,MAAOM,KAAP,GAAA,KAAA,CAAA,CAAA,CAAA;AAAA,MAAcC,GAAd,GAAA,KAAA,CAAA,CAAA,CAAA;;AACA,MAAMC,KAAK,GAAG,CAACC,KAAK,CAAA,KAAA,EAAQT,KAAK,CAAb,GAAA,EAAmBA,KAAK,CAA9B,GAAM,CAAN,EAAqCS,KAAK,CAAA,GAAA,EAAMT,KAAK,CAAX,GAAA,EAAiBA,KAAK,CAA9E,GAAwD,CAA1C,CAAd;AAEA,MAAMU,YAA0C,GAAG,KAAK,CAAL,WAAA,CAAkB,UAAA,SAAA,EAAA,KAAA,EAAsB;AACzF,QAAIV,KAAK,CAALA,QAAAA,IAAkBQ,KAAK,CAALA,CAAK,CAALA,KAAaG,SAAS,CAAtBH,CAAsB,CAAtBA,IAA6BA,KAAK,CAALA,CAAK,CAALA,KAAaG,SAAS,CAAzE,CAAyE,CAAzE,EAA8E;AAC5E;AACD;;AACD,KAAA,YAAA,IAAiBP,QAAQ,CAAzB,SAAyB,CAAzB;AACAN,IAAAA,QAAQ,IAAIA,QAAQ,CAAA,SAAA,EAApBA,KAAoB,CAApBA;AALiD,GAAA,EAMhD,CAAA,QAAA,EAAA,YAAA,EANH,KAMG,CANgD,CAAnD;AAQA,SAAO,mBAAA,CAAA,eAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAA4B,IAAA,KAAK,EAAjC,KAAA;AAA0C,IAAA,QAAQ,EAAEY;AAApD,GAAA,CAAA,CAAP;AAfF,CAAA;;AAkBAb,WAAW,CAAXA,YAAAA,GAA2B;AACzBe,EAAAA,GAAG,EADsB,CAAA;AAEzBC,EAAAA,GAAG,EAFsB,GAAA;AAGzBC,EAAAA,IAAI,EAAE;AAHmB,CAA3BjB;AAMA,eAAA,WAAA","sourcesContent":["import * as React from 'react';\nimport { clamp } from '../../helpers/math';\nimport { UniversalSlider, UniversalSliderProps } from './UniversalSlider';\n\nexport type Value = [number, number];\nexport type RangeSliderProps = UniversalSliderProps<Value>;\n\nconst RangeSlider: React.FC<RangeSliderProps> = ({ onChange, defaultValue, ...props }: RangeSliderProps) => {\n  const isControlled = Boolean(props.value);\n\n  const [localValue, setValue] = React.useState(defaultValue || [props.min, props.max] as Value);\n  const [start, end] = props.value || localValue;\n  const value = [clamp(start, props.min, props.max), clamp(end, props.min, props.max)] as Value;\n\n  const handleChange: RangeSliderProps['onChange'] = React.useCallback((nextValue, event) => {\n    if (props.disabled || value[0] === nextValue[0] && value[1] === nextValue[1]) {\n      return;\n    }\n    !isControlled && setValue(nextValue);\n    onChange && onChange(nextValue, event);\n  }, [onChange, isControlled, value]);\n\n  return <UniversalSlider {...props} value={value} onChange={handleChange} />;\n};\n\nRangeSlider.defaultProps = {\n  min: 0,\n  max: 100,\n  step: 0,\n};\n\nexport default RangeSlider;\n"]},"metadata":{},"sourceType":"module"}