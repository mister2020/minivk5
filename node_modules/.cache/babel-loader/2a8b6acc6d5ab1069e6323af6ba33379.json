{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onChange\", \"defaultValue\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from 'react';\nimport { clamp } from \"../../helpers/math\";\nimport { UniversalSlider } from \"../RangeSlider/UniversalSlider\";\n\nvar Slider = function Slider(_ref) {\n  var onChange = _ref.onChange,\n      defaultValue = _ref.defaultValue,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var isControlled = props.value != null;\n\n  var _React$useState = React.useState(defaultValue == null ? props.min : defaultValue),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      localValue = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var value = clamp(isControlled ? props.value : localValue, props.min, props.max);\n  var handleChange = React.useCallback(function (nextValue, event) {\n    if (props.disabled || value === nextValue[1]) {\n      return;\n    }\n\n    !isControlled && setValue(nextValue[1]);\n    onChange && onChange(nextValue[1], event);\n  }, [onChange, isControlled, value]);\n  var rangeValue = React.useMemo(function () {\n    return [null, value];\n  }, [value]);\n  return createScopedElement(UniversalSlider, _extends({}, props, {\n    value: rangeValue,\n    onChange: handleChange\n  }));\n};\n\nSlider.defaultProps = {\n  min: 0,\n  max: 100,\n  step: 0\n};\nexport default Slider;","map":{"version":3,"sources":["../../../src/components/Slider/Slider.tsx"],"names":["Slider","onChange","defaultValue","props","isControlled","localValue","setValue","React","value","clamp","handleChange","nextValue","rangeValue","min","max","step"],"mappings":";;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,KAAA,QAAA,oBAAA;AACA,SAAA,eAAA,QAAA,gCAAA;;AAIA,IAAMA,MAAM,GAAG,SAATA,MAAS,CAAA,IAAA,EAAuD;AAAA,MAApDC,QAAoD,GAAA,IAAA,CAApDA,QAAoD;AAAA,MAA1CC,YAA0C,GAAA,IAAA,CAA1CA,YAA0C;AAAA,MAAzBC,KAAyB,GAAA,wBAAA,CAAA,IAAA,EAAA,SAAA,CAAA;;AACpE,MAAMC,YAAY,GAAGD,KAAK,CAALA,KAAAA,IAArB,IAAA;;AAEA,MAAA,eAAA,GAA+BI,KAAK,CAALA,QAAAA,CAAeL,YAAY,IAAZA,IAAAA,GAAuBC,KAAK,CAA5BD,GAAAA,GAA9C,YAA+BK,CAA/B;AAAA,MAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;AAAA,MAAOF,UAAP,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MAAmBC,QAAnB,GAAA,gBAAA,CAAA,CAAA,CAAA;;AACA,MAAME,KAAK,GAAGC,KAAK,CAACL,YAAY,GAAGD,KAAK,CAAR,KAAA,GAAb,UAAA,EAA0CA,KAAK,CAA/C,GAAA,EAAqDA,KAAK,CAA7E,GAAmB,CAAnB;AAEA,MAAMO,YAA8D,GAAG,KAAK,CAAL,WAAA,CAAkB,UAAA,SAAA,EAAA,KAAA,EAAsB;AAC7G,QAAIP,KAAK,CAALA,QAAAA,IAAkBK,KAAK,KAAKG,SAAS,CAAzC,CAAyC,CAAzC,EAA8C;AAC5C;AACD;;AACD,KAAA,YAAA,IAAiBL,QAAQ,CAACK,SAAS,CAAnC,CAAmC,CAAV,CAAzB;AACAV,IAAAA,QAAQ,IAAIA,QAAQ,CAACU,SAAS,CAAV,CAAU,CAAV,EAApBV,KAAoB,CAApBA;AALqE,GAAA,EAMpE,CAAA,QAAA,EAAA,YAAA,EANH,KAMG,CANoE,CAAvE;AAQA,MAAMW,UAA0B,GAAG,KAAK,CAAL,OAAA,CAAc,YAAA;AAAA,WAAM,CAAA,IAAA,EAAN,KAAM,CAAN;AAAd,GAAA,EAAmC,CAAtE,KAAsE,CAAnC,CAAnC;AACA,SAAO,mBAAA,CAAA,eAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAA4B,IAAA,KAAK,EAAjC,UAAA;AAA+C,IAAA,QAAQ,EAAEF;AAAzD,GAAA,CAAA,CAAP;AAfF,CAAA;;AAkBAV,MAAM,CAANA,YAAAA,GAAsB;AACpBa,EAAAA,GAAG,EADiB,CAAA;AAEpBC,EAAAA,GAAG,EAFiB,GAAA;AAGpBC,EAAAA,IAAI,EAAE;AAHc,CAAtBf;AAMA,eAAA,MAAA","sourcesContent":["import * as React from 'react';\nimport { clamp } from '../../helpers/math';\nimport { UniversalSlider, UniversalSliderProps, UniversalValue } from '../RangeSlider/UniversalSlider';\n\nexport type SliderProps = UniversalSliderProps<number>;\n\nconst Slider = ({ onChange, defaultValue, ...props }: SliderProps) => {\n  const isControlled = props.value != null;\n\n  const [localValue, setValue] = React.useState(defaultValue == null ? props.min : defaultValue);\n  const value = clamp(isControlled ? props.value : localValue, props.min, props.max);\n\n  const handleChange: UniversalSliderProps<UniversalValue>['onChange'] = React.useCallback((nextValue, event) => {\n    if (props.disabled || value === nextValue[1]) {\n      return;\n    }\n    !isControlled && setValue(nextValue[1]);\n    onChange && onChange(nextValue[1], event);\n  }, [onChange, isControlled, value]);\n\n  const rangeValue: [null, number] = React.useMemo(() => [null, value], [value]);\n  return <UniversalSlider {...props} value={rangeValue} onChange={handleChange} />;\n};\n\nSlider.defaultProps = {\n  min: 0,\n  max: 100,\n  step: 0,\n};\n\nexport default Slider;\n"]},"metadata":{},"sourceType":"module"}