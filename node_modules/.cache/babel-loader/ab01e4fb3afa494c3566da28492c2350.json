{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"selected\", \"label\", \"indicator\", \"text\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport Counter from \"../Counter/Counter\";\nimport { classNames } from \"../../lib/classNames\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { hasReactNode } from \"../../lib/utils\";\n\nvar TabbarItem = function TabbarItem(props) {\n  var children = props.children,\n      selected = props.selected,\n      label = props.label,\n      indicator = props.indicator,\n      text = props.text,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var platform = usePlatform();\n  var Component = restProps.href ? 'a' : 'div';\n  return createScopedElement(Component, _extends({}, restProps, {\n    vkuiClass: classNames(getClassName('TabbarItem', platform), {\n      'TabbarItem--selected': selected,\n      'TabbarItem--text': !!text\n    })\n  }), createScopedElement(\"div\", {\n    vkuiClass: \"TabbarItem__in\"\n  }, createScopedElement(\"div\", {\n    vkuiClass: \"TabbarItem__icon\"\n  }, children, createScopedElement(\"div\", {\n    vkuiClass: \"TabbarItem__label\"\n  }, hasReactNode(indicator) && indicator, !indicator && label && createScopedElement(Counter, {\n    size: \"s\",\n    mode: \"prominent\"\n  }, label))), text && createScopedElement(\"div\", {\n    vkuiClass: \"TabbarItem__text\"\n  }, text)));\n};\n\nexport default TabbarItem;","map":{"version":3,"sources":["../../../src/components/TabbarItem/TabbarItem.tsx"],"names":["TabbarItem","children","selected","label","indicator","text","restProps","props","platform","usePlatform","Component","classNames","getClassName","hasReactNode"],"mappings":";;;;AACA,SAAA,YAAA,QAAA,4BAAA;AACA,OAAA,OAAA,MAAA,oBAAA;AACA,SAAA,UAAA,QAAA,sBAAA;AACA,SAAA,WAAA,QAAA,yBAAA;AACA,SAAA,YAAA,QAAA,iBAAA;;AAmBA,IAAMA,UAAoD,GAAG,SAAvDA,UAAuD,CAAA,KAAA,EAA4B;AACvF,MAAQC,QAAR,GAAqEM,KAArE,CAAA,QAAA;AAAA,MAAkBL,QAAlB,GAAqEK,KAArE,CAAA,QAAA;AAAA,MAA4BJ,KAA5B,GAAqEI,KAArE,CAAA,KAAA;AAAA,MAAmCH,SAAnC,GAAqEG,KAArE,CAAA,SAAA;AAAA,MAA8CF,IAA9C,GAAqEE,KAArE,CAAA,IAAA;AAAA,MAAuDD,SAAvD,GAAA,wBAAA,CAAA,KAAA,EAAA,SAAA,CAAA;;AACA,MAAME,QAAQ,GAAGC,WAAjB,EAAA;AACA,MAAMC,SAA4B,GAAGJ,SAAS,CAATA,IAAAA,GAAAA,GAAAA,GAArC,KAAA;AAEA,SACE,mBAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AAEE,IAAA,SAAS,EAAEK,UAAU,CAACC,YAAY,CAAA,YAAA,EAAb,QAAa,CAAb,EAAuC;AAC1D,8BAD0D,QAAA;AAE1D,0BAAoB,CAAC,CAACP;AAFoC,KAAvC;AAFvB,GAAA,CAAA,EAOE,mBAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EACE,mBAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EAAA,QAAA,EAEE,mBAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EACGQ,YAAY,CAAZA,SAAY,CAAZA,IADH,SAAA,EAEG,CAAA,SAAA,IAAA,KAAA,IAAuB,mBAAA,CAAA,OAAA,EAAA;AAAS,IAAA,IAAI,EAAb,GAAA;AAAkB,IAAA,IAAI,EAAC;AAAvB,GAAA,EAL9B,KAK8B,CAF1B,CAFF,CADF,EAQGR,IAAI,IAAI,mBAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EAhBf,IAgBe,CARX,CAPF,CADF;AALF,CAAA;;AA2BA,eAAA,UAAA","sourcesContent":["import * as React from 'react';\nimport { getClassName } from '../../helpers/getClassName';\nimport Counter from '../Counter/Counter';\nimport { classNames } from '../../lib/classNames';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { hasReactNode } from '../../lib/utils';\nimport './TabbarItem.css';\n\nexport interface TabbarItemProps extends React.HTMLAttributes<HTMLElement>, React.AnchorHTMLAttributes<HTMLElement> {\n  selected?: boolean;\n  /**\n   * Тест рядом с иконкой\n   */\n  text?: React.ReactNode;\n  /**\n   * Индикатор над иконкой. Принимает `<Badge mode=\"prominent\" />` или `<Counter size=\"s\" mode=\"prominent\" />`\n   */\n  indicator?: React.ReactNode;\n  /**\n   * @deprecated будет удалено в 5.0.0. Используйте `indicator`\n   */\n  label?: React.ReactNode;\n}\n\nconst TabbarItem: React.FunctionComponent<TabbarItemProps> = (props: TabbarItemProps) => {\n  const { children, selected, label, indicator, text, ...restProps } = props;\n  const platform = usePlatform();\n  const Component: React.ElementType = restProps.href ? 'a' : 'div';\n\n  return (\n    <Component\n      {...restProps}\n      vkuiClass={classNames(getClassName('TabbarItem', platform), {\n        'TabbarItem--selected': selected,\n        'TabbarItem--text': !!text,\n      })}\n    >\n      <div vkuiClass=\"TabbarItem__in\">\n        <div vkuiClass=\"TabbarItem__icon\">\n          {children}\n          <div vkuiClass=\"TabbarItem__label\">\n            {hasReactNode(indicator) && indicator}\n            {!indicator && label && <Counter size=\"s\" mode=\"prominent\">{label}</Counter>}\n          </div>\n        </div>\n        {text && <div vkuiClass=\"TabbarItem__text\">{text}</div>}\n      </div>\n    </Component>\n  );\n};\n\nexport default TabbarItem;\n"]},"metadata":{},"sourceType":"module"}