{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nvar _excluded = [\"badge\", \"before\", \"indicator\", \"children\", \"after\", \"description\", \"expandable\", \"multiline\", \"sizeY\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport { classNames } from \"../../lib/classNames\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport Tappable from \"../Tappable/Tappable\";\nimport { Icon24Chevron } from '@vkontakte/icons';\nimport { IOS } from \"../../lib/platform\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { hasReactNode } from \"../../lib/utils\";\nimport { useAdaptivity } from \"../../hooks/useAdaptivity\";\nimport { withAdaptivity, SizeType } from \"../../hoc/withAdaptivity\";\nimport Title from \"../Typography/Title/Title\";\nimport Text from \"../Typography/Text/Text\";\nimport Subhead from \"../Typography/Subhead/Subhead\";\n\nvar SimpleCellTypography = function SimpleCellTypography(props) {\n  var _useAdaptivity = useAdaptivity(),\n      sizeY = _useAdaptivity.sizeY;\n\n  return sizeY === SizeType.COMPACT ? createScopedElement(Text, _extends({\n    weight: \"regular\"\n  }, props)) : createScopedElement(Title, _extends({\n    level: \"3\",\n    weight: \"regular\"\n  }, props));\n};\n\nvar SimpleCell = function SimpleCell(_ref) {\n  var badge = _ref.badge,\n      before = _ref.before,\n      indicator = _ref.indicator,\n      children = _ref.children,\n      after = _ref.after,\n      description = _ref.description,\n      expandable = _ref.expandable,\n      multiline = _ref.multiline,\n      sizeY = _ref.sizeY,\n      restProps = _objectWithoutProperties(_ref, _excluded);\n\n  var platform = usePlatform();\n  var hasAfter = hasReactNode(after) || expandable && platform === IOS;\n  return createScopedElement(Tappable, _extends({}, restProps, {\n    vkuiClass: classNames(getClassName('SimpleCell', platform), {\n      'SimpleCell--exp': expandable,\n      'SimpleCell--mult': multiline\n    }, \"SimpleCell--sizeY-\".concat(sizeY))\n  }), before, createScopedElement(\"div\", {\n    vkuiClass: \"SimpleCell__main\"\n  }, createScopedElement(\"div\", {\n    vkuiClass: \"SimpleCell__content\"\n  }, createScopedElement(SimpleCellTypography, {\n    vkuiClass: \"SimpleCell__children\"\n  }, children), hasReactNode(badge) && createScopedElement(\"span\", {\n    vkuiClass: \"SimpleCell__badge\"\n  }, badge)), description && createScopedElement(Subhead, {\n    Component: \"span\",\n    weight: \"regular\",\n    vkuiClass: \"SimpleCell__description\"\n  }, description)), hasReactNode(indicator) && createScopedElement(SimpleCellTypography, {\n    Component: \"span\",\n    vkuiClass: \"SimpleCell__indicator\"\n  }, indicator), hasAfter && createScopedElement(\"div\", {\n    vkuiClass: \"SimpleCell__after\"\n  }, after, expandable && platform === IOS && createScopedElement(Icon24Chevron, null)));\n};\n\nexport default withAdaptivity(SimpleCell, {\n  sizeY: true\n});","map":{"version":3,"sources":["../../../src/components/SimpleCell/SimpleCell.tsx"],"names":["SimpleCellTypography","sizeY","useAdaptivity","SizeType","SimpleCell","badge","before","indicator","children","after","description","expandable","multiline","restProps","platform","usePlatform","hasAfter","hasReactNode","classNames","getClassName","withAdaptivity"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNames } from '../../lib/classNames';\nimport { getClassName } from '../../helpers/getClassName';\nimport Tappable, { TappableProps } from '../Tappable/Tappable';\nimport { Icon24Chevron } from '@vkontakte/icons';\nimport { IOS } from '../../lib/platform';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { hasReactNode } from '../../lib/utils';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { withAdaptivity, SizeType } from '../../hoc/withAdaptivity';\nimport Title from '../Typography/Title/Title';\nimport Text from '../Typography/Text/Text';\nimport Subhead from '../Typography/Subhead/Subhead';\nimport './SimpleCell.css';\n\nexport interface SimpleCellOwnProps {\n  /**\n   * Иконка 28 или `<Avatar size={28|32|40|48|72} />`\n   */\n  before?: React.ReactNode;\n  /**\n   * Иконка 12 или `<Badge />`. Добавится справа от текста `children`.\n   */\n  badge?: React.ReactNode;\n  /**\n   * Контейнер для текста справа от `children`.\n   */\n  indicator?: React.ReactNode;\n  /**\n   * Иконка 24|28 или `<Switch />`. Располагается справа от `indicator`.\n   */\n  after?: React.ReactNode;\n  /**\n   * Контейнер для текста под `children`.\n   */\n  description?: React.ReactNode;\n  /**\n   * Убирает анимацию нажатия\n   */\n  disabled?: boolean;\n  /**\n   * В iOS добавляет chevron справа. Передавать `true`, если предполагается переход при клике по ячейке.\n   */\n  expandable?: boolean;\n  multiline?: boolean;\n  Component?: React.ElementType;\n}\n\nexport interface SimpleCellProps extends SimpleCellOwnProps, TappableProps {}\n\ninterface SimpleCellTypographyProps extends React.HTMLAttributes<HTMLDivElement> {\n  Component?: React.ElementType;\n}\n\nconst SimpleCellTypography: React.FC<SimpleCellTypographyProps> = (props: SimpleCellTypographyProps) => {\n  const { sizeY } = useAdaptivity();\n\n  return sizeY === SizeType.COMPACT\n    ? <Text weight=\"regular\" {...props} />\n    : <Title level=\"3\" weight=\"regular\" {...props} />;\n};\n\nconst SimpleCell: React.FC<SimpleCellProps> = ({\n  badge,\n  before,\n  indicator,\n  children,\n  after,\n  description,\n  expandable,\n  multiline,\n  sizeY,\n  ...restProps\n}) => {\n  const platform = usePlatform();\n  const hasAfter = hasReactNode(after) || expandable && platform === IOS;\n\n  return (\n    <Tappable\n      {...restProps}\n      vkuiClass={\n        classNames(\n          getClassName('SimpleCell', platform),\n          {\n            'SimpleCell--exp': expandable,\n            'SimpleCell--mult': multiline,\n          },\n          `SimpleCell--sizeY-${sizeY}`,\n        )\n      }\n    >\n      {before}\n      <div vkuiClass=\"SimpleCell__main\">\n        <div vkuiClass=\"SimpleCell__content\">\n          <SimpleCellTypography vkuiClass=\"SimpleCell__children\">{children}</SimpleCellTypography>\n          {hasReactNode(badge) &&\n            <span vkuiClass=\"SimpleCell__badge\">\n              {badge}\n            </span>\n          }\n        </div>\n        {description && <Subhead Component=\"span\" weight=\"regular\" vkuiClass=\"SimpleCell__description\">{description}</Subhead>}\n      </div>\n      {hasReactNode(indicator) &&\n        <SimpleCellTypography Component=\"span\" vkuiClass=\"SimpleCell__indicator\">{indicator}</SimpleCellTypography>\n      }\n      {hasAfter &&\n        <div vkuiClass=\"SimpleCell__after\">\n          {after}\n          {expandable && platform === IOS && <Icon24Chevron />}\n        </div>\n      }\n    </Tappable>\n  );\n};\n\nexport default withAdaptivity(SimpleCell, { sizeY: true });\n"]},"metadata":{},"sourceType":"module"}