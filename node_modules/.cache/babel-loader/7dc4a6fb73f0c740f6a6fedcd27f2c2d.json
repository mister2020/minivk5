{"ast":null,"code":"export var Keys;\n\n(function (Keys) {\n  Keys[\"ENTER\"] = \"Enter\";\n  Keys[\"SPACE\"] = \"Space\";\n  Keys[\"TAB\"] = \"Tab\";\n})(Keys || (Keys = {}));\n\nvar ACCESSIBLE_KEYS = [{\n  code: Keys.ENTER,\n  key: ['Enter'],\n  keyCode: 13\n}, {\n  code: Keys.SPACE,\n  key: ['Space', 'Spacebar', ' '],\n  keyCode: 32\n}, {\n  code: Keys.TAB,\n  key: ['Tab'],\n  keyCode: 9\n}];\nexport function pressedKey(e) {\n  var _ACCESSIBLE_KEYS$find;\n\n  return ((_ACCESSIBLE_KEYS$find = ACCESSIBLE_KEYS.find(function (_ref) {\n    var key = _ref.key,\n        keyCode = _ref.keyCode;\n    return key.includes(e.key) || keyCode === e.keyCode;\n  })) === null || _ACCESSIBLE_KEYS$find === void 0 ? void 0 : _ACCESSIBLE_KEYS$find.code) || null;\n}\nexport function shouldTriggerClickOnEnterOrSpace(e) {\n  var el = e.target;\n  var tagName = el.tagName;\n  var role = el.getAttribute('role');\n  var isValidKeyboardEventTarget = el.isContentEditable !== true && tagName !== 'INPUT' && tagName !== 'TEXTAREA' && (role === 'button' || role === 'link');\n  var isNativeAnchorEl = tagName === 'A' && el.hasAttribute('href');\n  var keyPressed = pressedKey(e);\n  return isValidKeyboardEventTarget && ( // trigger buttons on Space\n  keyPressed === Keys.SPACE && role === 'button' || // trigger non-native links and buttons on Enter\n  keyPressed === Keys.ENTER && !isNativeAnchorEl);\n}","map":{"version":3,"sources":["../../src/lib/accessibility.ts"],"names":["Keys","ACCESSIBLE_KEYS","code","key","keyCode","e","el","tagName","role","isValidKeyboardEventTarget","isNativeAnchorEl","keyPressed","pressedKey"],"mappings":"AAEA,OAAA,IAAA,IAAA;;WAAYA,I;AAAAA,EAAAA,I,SAAAA,G,OAAAA;AAAAA,EAAAA,I,SAAAA,G,OAAAA;AAAAA,EAAAA,I,OAAAA,G,KAAAA;GAAAA,I,KAAAA,I;;AAYZ,IAAMC,eAAgC,GAAG,CACvC;AACEC,EAAAA,IAAI,EAAEF,IAAI,CADZ,KAAA;AAEEG,EAAAA,GAAG,EAAE,CAFP,OAEO,CAFP;AAGEC,EAAAA,OAAO,EAAE;AAHX,CADuC,EAMvC;AACEF,EAAAA,IAAI,EAAEF,IAAI,CADZ,KAAA;AAEEG,EAAAA,GAAG,EAAE,CAAA,OAAA,EAAA,UAAA,EAFP,GAEO,CAFP;AAGEC,EAAAA,OAAO,EAAE;AAHX,CANuC,EAWvC;AACEF,EAAAA,IAAI,EAAEF,IAAI,CADZ,GAAA;AAEEG,EAAAA,GAAG,EAAE,CAFP,KAEO,CAFP;AAGEC,EAAAA,OAAO,EAAE;AAHX,CAXuC,CAAzC;AAkBA,OAAO,SAAA,UAAA,CAAA,CAAA,EAA4C;AAAA,MAAA,qBAAA;;AACjD,SAAO,CAAA,CAAA,qBAAA,GAAA,eAAe,CAAf,IAAA,CAAqB,UAAA,IAAA,EAAA;AAAA,QAAGD,GAAH,GAAA,IAAA,CAAA,GAAA;AAAA,QAAQC,OAAR,GAAA,IAAA,CAAA,OAAA;AAAA,WAAsBD,GAAG,CAAHA,QAAAA,CAAaE,CAAC,CAAdF,GAAAA,KAAuBC,OAAO,KAAKC,CAAC,CAA1D,OAAA;AAArB,GAAA,CAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,IAAA,KAAP,IAAA;AACD;AAED,OAAO,SAAA,gCAAA,CAAA,CAAA,EAA+F;AACpG,MAAMC,EAAE,GAAGD,CAAC,CAAZ,MAAA;AACA,MAAQE,OAAR,GAAoBD,EAApB,CAAA,OAAA;AAEA,MAAME,IAAI,GAAGF,EAAE,CAAFA,YAAAA,CAAb,MAAaA,CAAb;AAEA,MAAMG,0BAAmC,GAAGH,EAAE,CAAFA,iBAAAA,KAAAA,IAAAA,IACvCC,OAAO,KADgCD,OAAAA,IAEvCC,OAAO,KAFgCD,UAAAA,KAGtCE,IAAI,KAAJA,QAAAA,IAAqBA,IAAI,KAH/B,MAA4CF,CAA5C;AAKA,MAAMI,gBAAgB,GAAGH,OAAO,KAAPA,GAAAA,IAAmBD,EAAE,CAAFA,YAAAA,CAA5C,MAA4CA,CAA5C;AACA,MAAMK,UAAU,GAAGC,UAAU,CAA7B,CAA6B,CAA7B;AAEA,SAAOH,0BAA0B,MAC/B;AACAE,EAAAA,UAAU,KAAKX,IAAI,CAAnBW,KAAAA,IAA6BH,IAAI,KAAjCG,QAAAA,IAEA;AACAA,EAAAA,UAAU,KAAKX,IAAI,CAAnBW,KAAAA,IAA6B,CAL/B,gBAAiC,CAAjC;AAOD","sourcesContent":["import * as React from 'react';\n\nexport enum Keys {\n  ENTER = 'Enter',\n  SPACE = 'Space',\n  TAB = 'Tab',\n}\n\ninterface AccessibleKey {\n  code: Keys;\n  key: string[];\n  keyCode: number;\n}\n\nconst ACCESSIBLE_KEYS: AccessibleKey[] = [\n  {\n    code: Keys.ENTER,\n    key: ['Enter'],\n    keyCode: 13,\n  },\n  {\n    code: Keys.SPACE,\n    key: ['Space', 'Spacebar', ' '],\n    keyCode: 32,\n  },\n  {\n    code: Keys.TAB,\n    key: ['Tab'],\n    keyCode: 9,\n  },\n];\n\nexport function pressedKey(e: KeyboardEvent): Keys {\n  return ACCESSIBLE_KEYS.find(({ key, keyCode }) => key.includes(e.key) || keyCode === e.keyCode)?.code || null;\n}\n\nexport function shouldTriggerClickOnEnterOrSpace(e: KeyboardEvent | React.KeyboardEvent<HTMLElement>) {\n  const el = e.target as HTMLElement;\n  const { tagName } = el;\n\n  const role = el.getAttribute('role');\n\n  const isValidKeyboardEventTarget: boolean = el.isContentEditable !== true\n    && tagName !== 'INPUT'\n    && tagName !== 'TEXTAREA'\n    && (role === 'button' || role === 'link');\n\n  const isNativeAnchorEl = tagName === 'A' && el.hasAttribute('href');\n  const keyPressed = pressedKey(e as KeyboardEvent);\n\n  return isValidKeyboardEventTarget && (\n    // trigger buttons on Space\n    keyPressed === Keys.SPACE && role === 'button'\n    ||\n    // trigger non-native links and buttons on Enter\n    keyPressed === Keys.ENTER && !isNativeAnchorEl\n  );\n}\n"]},"metadata":{},"sourceType":"module"}