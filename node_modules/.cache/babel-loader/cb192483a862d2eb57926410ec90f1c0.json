{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"value\", \"onChange\", \"onInputChange\", \"onKeyDown\", \"onBlur\", \"onFocus\", \"children\", \"className\", \"inputValue\", \"getRef\", \"getRootRef\", \"placeholder\", \"getOptionValue\", \"getOptionLabel\", \"getNewOptionData\", \"renderChip\", \"after\", \"inputAriaLabel\"],\n    _excluded2 = [\"disabled\", \"value\", \"label\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from 'react';\nimport { FormField } from \"../FormField/FormField\";\nimport { classNames } from \"../../lib/classNames\";\nimport Chip from \"../Chip/Chip\";\nimport { noop } from \"../../lib/utils\";\nimport { useChipsInput } from \"./useChipsInput\";\nimport { useAdaptivity } from \"../../hooks/useAdaptivity\";\nimport { prefixClass } from \"../../lib/prefixClass\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\n\nvar ChipsInput = function ChipsInput(props) {\n  var style = props.style,\n      value = props.value,\n      onChange = props.onChange,\n      onInputChange = props.onInputChange,\n      onKeyDown = props.onKeyDown,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      children = props.children,\n      className = props.className,\n      inputValue = props.inputValue,\n      getRef = props.getRef,\n      getRootRef = props.getRootRef,\n      placeholder = props.placeholder,\n      getOptionValue = props.getOptionValue,\n      getOptionLabel = props.getOptionLabel,\n      getNewOptionData = props.getNewOptionData,\n      renderChip = props.renderChip,\n      after = props.after,\n      inputAriaLabel = props.inputAriaLabel,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var _useAdaptivity = useAdaptivity(),\n      sizeY = _useAdaptivity.sizeY;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focused = _React$useState2[0],\n      setFocused = _React$useState2[1];\n\n  var _useChipsInput = useChipsInput(props),\n      fieldValue = _useChipsInput.fieldValue,\n      addOptionFromInput = _useChipsInput.addOptionFromInput,\n      removeOption = _useChipsInput.removeOption,\n      selectedOptions = _useChipsInput.selectedOptions,\n      handleInputChange = _useChipsInput.handleInputChange;\n\n  var inputRef = useExternRef(getRef);\n  var isDisabled = restProps.disabled || restProps.readOnly;\n\n  var handleKeyDown = function handleKeyDown(e) {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    onKeyDown(e);\n\n    if (e.key === 'Backspace' && !e.defaultPrevented && !fieldValue && selectedOptions.length) {\n      removeOption(getOptionValue(selectedOptions[selectedOptions.length - 1]));\n      e.preventDefault();\n    }\n\n    if (e.key === 'Enter' && !e.defaultPrevented && fieldValue) {\n      addOptionFromInput();\n      e.preventDefault();\n    }\n  };\n\n  var handleBlur = function handleBlur(e) {\n    if (focused) {\n      setFocused(false);\n    }\n\n    onBlur(e);\n  };\n\n  var handleFocus = function handleFocus(e) {\n    if (!focused) {\n      setFocused(true);\n    }\n\n    onFocus(e);\n  };\n\n  var handleChipRemove = function handleChipRemove(_, value) {\n    removeOption(value);\n  };\n\n  var handleClick = function handleClick(e) {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if ((inputRef === null || inputRef === void 0 ? void 0 : inputRef.current) !== null && !focused) {\n      inputRef.current.focus();\n    }\n  };\n\n  return createScopedElement(FormField, {\n    getRootRef: getRootRef,\n    vkuiClass: classNames('ChipsInput', \"ChipsInput--sizeY-\".concat(sizeY), {\n      'ChipsInput--focused': focused,\n      'ChipsInput--withChips': !!selectedOptions.length\n    }),\n    className: className,\n    style: style,\n    disabled: restProps.disabled,\n    after: after,\n    onClick: handleClick,\n    role: \"application\",\n    \"aria-disabled\": restProps.disabled,\n    \"aria-readonly\": restProps.readOnly\n  }, createScopedElement(\"div\", {\n    vkuiClass: \"ChipsInput__container\",\n    role: \"presentation\"\n  }, selectedOptions.map(function (option) {\n    var value = getOptionValue(option);\n    var label = getOptionLabel(option);\n    return createScopedElement(React.Fragment, {\n      key: value\n    }, renderChip({\n      option: option,\n      value: value,\n      label: label,\n      onRemove: handleChipRemove,\n      disabled: restProps.disabled,\n      className: prefixClass('ChipsInput__chip')\n    }));\n  }), createScopedElement(\"label\", {\n    vkuiClass: \"ChipsInput__input-container\",\n    \"aria-label\": inputAriaLabel\n  }, createScopedElement(\"input\", _extends({\n    ref: inputRef,\n    value: fieldValue,\n    autoCapitalize: \"none\",\n    autoComplete: \"off\",\n    autoCorrect: \"off\",\n    spellCheck: false,\n    \"aria-autocomplete\": \"list\",\n    vkuiClass: \"ChipsInput__el\",\n    onChange: handleInputChange,\n    onKeyDown: handleKeyDown,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    placeholder: selectedOptions.length ? null : placeholder\n  }, restProps)))));\n};\n\nexport var chipsInputDefaultProps = {\n  type: 'text',\n  onChange: noop,\n  onInputChange: noop,\n  onKeyDown: noop,\n  onBlur: noop,\n  onFocus: noop,\n  value: [],\n  inputValue: '',\n  inputAriaLabel: 'Введите ваше значение...',\n  getOptionValue: function getOptionValue(option) {\n    return option.value;\n  },\n  getOptionLabel: function getOptionLabel(option) {\n    return option.label;\n  },\n  getNewOptionData: function getNewOptionData(_, label) {\n    return {\n      value: label,\n      label: label\n    };\n  },\n  renderChip: function renderChip(_ref) {\n    var disabled = _ref.disabled,\n        value = _ref.value,\n        label = _ref.label,\n        rest = _objectWithoutProperties(_ref, _excluded2);\n\n    return createScopedElement(Chip, _extends({\n      value: value,\n      removable: !disabled\n    }, rest), label);\n  }\n};\nChipsInput.defaultProps = chipsInputDefaultProps;\nexport default ChipsInput;","map":{"version":3,"sources":["../../../src/components/ChipsInput/ChipsInput.tsx"],"names":["ChipsInput","style","value","onChange","onInputChange","onKeyDown","onBlur","onFocus","children","className","inputValue","getRef","getRootRef","placeholder","getOptionValue","getOptionLabel","getNewOptionData","renderChip","after","inputAriaLabel","restProps","props","sizeY","useAdaptivity","focused","setFocused","React","fieldValue","addOptionFromInput","removeOption","selectedOptions","handleInputChange","useChipsInput","inputRef","useExternRef","isDisabled","handleKeyDown","e","handleBlur","handleFocus","handleChipRemove","handleClick","classNames","length","readOnly","label","option","onRemove","disabled","prefixClass","chipsInputDefaultProps","type","rest"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { HasAlign, HasRef, HasRootRef } from '../../types';\nimport { FormField, FormFieldProps } from '../FormField/FormField';\nimport { classNames } from '../../lib/classNames';\nimport Chip, { ChipProps } from '../Chip/Chip';\nimport { noop } from '../../lib/utils';\nimport { useChipsInput } from './useChipsInput';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { prefixClass } from '../../lib/prefixClass';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport './ChipsInput.css';\n\nexport type ChipsInputValue = string | number;\n\nexport interface ChipsInputOption {\n  value?: ChipsInputValue;\n  label?: string;\n  [otherProp: string]: any;\n}\n\nexport interface RenderChip<Option extends ChipsInputOption> extends ChipProps {\n  label: string;\n  option: Option;\n  disabled: boolean;\n}\n\nexport interface ChipsInputProps<Option extends ChipsInputOption> extends\n  Omit<React.InputHTMLAttributes<HTMLInputElement>, 'value' | 'onChange'>,\n  HasRef<HTMLInputElement>,\n  HasRootRef<HTMLDivElement>,\n  HasAlign,\n  FormFieldProps {\n  value: Option[];\n  inputValue?: string;\n  onChange?: (o: Option[]) => void;\n  onInputChange?: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  getOptionValue?: (o?: Option) => ChipsInputValue;\n  getOptionLabel?: (o?: Option) => string;\n  getNewOptionData?: (v?: ChipsInputValue, l?: string) => Option;\n  renderChip?: (props?: RenderChip<Option>) => React.ReactNode;\n  inputAriaLabel?: string;\n}\n\nconst ChipsInput = <Option extends ChipsInputOption>(props: ChipsInputProps<Option>) => {\n  const { style, value, onChange, onInputChange, onKeyDown, onBlur, onFocus, children, className, inputValue,\n    getRef, getRootRef, placeholder, getOptionValue, getOptionLabel, getNewOptionData, renderChip,\n    after, inputAriaLabel, ...restProps } = props;\n  const { sizeY } = useAdaptivity();\n\n  const [focused, setFocused] = React.useState(false);\n  const { fieldValue, addOptionFromInput, removeOption, selectedOptions, handleInputChange } = useChipsInput(props);\n  const inputRef = useExternRef(getRef);\n\n  const isDisabled = restProps.disabled || restProps.readOnly;\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    onKeyDown(e);\n\n    if (e.key === 'Backspace' && !e.defaultPrevented && !fieldValue && selectedOptions.length) {\n      removeOption(getOptionValue(selectedOptions[selectedOptions.length - 1]));\n      e.preventDefault();\n    }\n\n    if (e.key === 'Enter' && !e.defaultPrevented && fieldValue) {\n      addOptionFromInput();\n      e.preventDefault();\n    }\n  };\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    if (focused) {\n      setFocused(false);\n    }\n    onBlur(e);\n  };\n\n  const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    if (!focused) {\n      setFocused(true);\n    }\n    onFocus(e);\n  };\n\n  const handleChipRemove = (_: React.MouseEvent<HTMLInputElement>, value: ChipsInputValue) => {\n    removeOption(value);\n  };\n\n  const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (inputRef?.current !== null && !focused) {\n      inputRef.current.focus();\n    }\n  };\n\n  return (\n    <FormField\n      getRootRef={getRootRef}\n      vkuiClass={classNames('ChipsInput', `ChipsInput--sizeY-${sizeY}`, {\n        'ChipsInput--focused': focused,\n        'ChipsInput--withChips': !!selectedOptions.length,\n      })}\n      className={className}\n      style={style}\n      disabled={restProps.disabled}\n      after={after}\n      onClick={handleClick}\n      role=\"application\"\n      aria-disabled={restProps.disabled}\n      aria-readonly={restProps.readOnly}\n    >\n      <div vkuiClass=\"ChipsInput__container\" role=\"presentation\">\n        {selectedOptions.map((option: Option) => {\n          const value = getOptionValue(option);\n          const label = getOptionLabel(option);\n\n          return (\n            <React.Fragment key={value}>\n              {renderChip({ option, value, label, onRemove: handleChipRemove, disabled: restProps.disabled, className: prefixClass('ChipsInput__chip') })}\n            </React.Fragment>\n          );\n        })}\n        <label vkuiClass=\"ChipsInput__input-container\" aria-label={inputAriaLabel}>\n          <input\n            ref={inputRef}\n            value={fieldValue}\n            autoCapitalize=\"none\"\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            spellCheck={false}\n            aria-autocomplete=\"list\"\n            vkuiClass=\"ChipsInput__el\"\n            onChange={handleInputChange}\n            onKeyDown={handleKeyDown}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n            placeholder={selectedOptions.length ? null : placeholder}\n            {...restProps}\n          />\n        </label>\n      </div>\n    </FormField>\n  );\n};\n\nexport const chipsInputDefaultProps: ChipsInputProps<any> = {\n  type: 'text',\n  onChange: noop,\n  onInputChange: noop,\n  onKeyDown: noop,\n  onBlur: noop,\n  onFocus: noop,\n  value: [],\n  inputValue: '',\n  inputAriaLabel: 'Введите ваше значение...',\n  getOptionValue: (option: ChipsInputOption): ChipsInputValue => option.value,\n  getOptionLabel: (option: ChipsInputOption): string => option.label,\n  getNewOptionData: (_: ChipsInputValue, label: string): ChipsInputOption => ({ value: label, label }),\n  renderChip({ disabled, value, label, ...rest }: RenderChip<ChipsInputOption>) {\n    return (\n      <Chip value={value} removable={!disabled} {...rest}>\n        {label}\n      </Chip>\n    );\n  },\n};\nChipsInput.defaultProps = chipsInputDefaultProps;\n\nexport default ChipsInput;\n"]},"metadata":{},"sourceType":"module"}