{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nexport var useChipsInput = function useChipsInput(props) {\n  var value = props.value,\n      getOptionValue = props.getOptionValue,\n      onChange = props.onChange,\n      onInputChange = props.onInputChange,\n      getNewOptionData = props.getNewOptionData;\n\n  var _React$useState = React.useState(props.inputValue),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      fieldValue = _React$useState2[0],\n      setFieldValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(value),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      selectedOptions = _React$useState4[0],\n      setSelectedOptions = _React$useState4[1];\n\n  var clearInput = React.useCallback(function () {\n    setFieldValue('');\n    onInputChange({\n      target: {\n        value: ''\n      }\n    });\n  }, [onInputChange]);\n  var handleInputChange = React.useCallback(function (e) {\n    setFieldValue(e.target.value);\n    onInputChange(e);\n  }, [onInputChange]);\n  var toggleOption = React.useCallback(function (newOption, value) {\n    var newSelectedOptions = selectedOptions.filter(function (option) {\n      return getOptionValue(newOption) !== getOptionValue(option);\n    });\n\n    if (value === true) {\n      newSelectedOptions.push(newOption);\n    }\n\n    setSelectedOptions(newSelectedOptions);\n    onChange(newSelectedOptions);\n  }, [selectedOptions, getOptionValue, onChange]);\n  var addOption = React.useCallback(function (newOption) {\n    return toggleOption(newOption, true);\n  }, [toggleOption]);\n  var addOptionFromInput = React.useCallback(function () {\n    var trimmedValue = fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.trim();\n\n    if (trimmedValue) {\n      addOption(getNewOptionData(undefined, trimmedValue));\n      clearInput();\n    }\n  }, [addOption, clearInput, getNewOptionData, fieldValue]);\n  var removeOption = React.useCallback(function (value) {\n    toggleOption(getNewOptionData(undefined, value), false);\n  }, [toggleOption, getNewOptionData]);\n  React.useEffect(function () {\n    setSelectedOptions(value);\n    return function () {\n      return setSelectedOptions([]);\n    };\n  }, [props.value]);\n  React.useEffect(function () {\n    setFieldValue(props.inputValue);\n    return function () {\n      return setFieldValue('');\n    };\n  }, [props.inputValue]);\n  return {\n    fieldValue: fieldValue,\n    setFieldValue: setFieldValue,\n    selectedOptions: selectedOptions,\n    setSelectedOptions: setSelectedOptions,\n    clearInput: clearInput,\n    toggleOption: toggleOption,\n    addOption: addOption,\n    addOptionFromInput: addOptionFromInput,\n    removeOption: removeOption,\n    handleInputChange: handleInputChange\n  };\n};","map":{"version":3,"sources":["../../../src/components/ChipsInput/useChipsInput.ts"],"names":["useChipsInput","value","getOptionValue","onChange","onInputChange","getNewOptionData","props","fieldValue","setFieldValue","React","selectedOptions","setSelectedOptions","clearInput","target","handleInputChange","e","toggleOption","newSelectedOptions","addOption","addOptionFromInput","trimmedValue","removeOption"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ChipsInputOption, ChipsInputProps, ChipsInputValue } from './ChipsInput';\n\nexport const useChipsInput = <Option extends ChipsInputOption>(props: Partial<ChipsInputProps<Option>>) => {\n  const { value, getOptionValue, onChange, onInputChange, getNewOptionData } = props;\n\n  const [fieldValue, setFieldValue] = React.useState(props.inputValue);\n  const [selectedOptions, setSelectedOptions] = React.useState(value);\n\n  const clearInput = React.useCallback(() => {\n    setFieldValue('');\n    onInputChange({ target: { value: '' } } as any);\n  }, [onInputChange]);\n\n  const handleInputChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFieldValue(e.target.value);\n    onInputChange(e);\n  }, [onInputChange]);\n\n  const toggleOption = React.useCallback((newOption: Option, value?: boolean) => {\n    const newSelectedOptions = selectedOptions.filter((option: Option) => getOptionValue(newOption) !== getOptionValue(option));\n\n    if (value === true) {\n      newSelectedOptions.push(newOption);\n    }\n\n    setSelectedOptions(newSelectedOptions);\n    onChange(newSelectedOptions);\n  }, [selectedOptions, getOptionValue, onChange]);\n\n  const addOption = React.useCallback((newOption: Option) => toggleOption(newOption, true), [toggleOption]);\n  const addOptionFromInput = React.useCallback(() => {\n    const trimmedValue = fieldValue?.trim();\n\n    if (trimmedValue) {\n      addOption(getNewOptionData(undefined, trimmedValue));\n      clearInput();\n    }\n  }, [addOption, clearInput, getNewOptionData, fieldValue]);\n  const removeOption = React.useCallback((value: ChipsInputValue) => {\n    toggleOption(getNewOptionData(undefined, value as string), false);\n  }, [toggleOption, getNewOptionData]);\n\n  React.useEffect(() => {\n    setSelectedOptions(value);\n\n    return () => setSelectedOptions([]);\n  }, [props.value]);\n\n  React.useEffect(() => {\n    setFieldValue(props.inputValue);\n\n    return () => setFieldValue('');\n  }, [props.inputValue]);\n\n  return { fieldValue, setFieldValue, selectedOptions, setSelectedOptions, clearInput, toggleOption, addOption, addOptionFromInput, removeOption, handleInputChange };\n};\n"]},"metadata":{},"sourceType":"module"}