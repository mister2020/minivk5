{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport { Keys, pressedKey } from \"../lib/accessibility\";\nimport { useDOM } from \"../lib/dom\";\nimport { useGlobalEventListener } from \"./useGlobalEventListener\";\nexport function useKeyboardInputTracker() {\n  var _useDOM = useDOM(),\n      document = _useDOM.document;\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isKeyboardInputActive = _React$useState2[0],\n      toggleKeyboardInput = _React$useState2[1];\n\n  var enableKeyboardInput = React.useCallback(function (e) {\n    toggleKeyboardInput(pressedKey(e) === Keys.TAB);\n  }, []);\n  var disableKeyboardInput = React.useCallback(function () {\n    toggleKeyboardInput(false);\n  }, []);\n  var eventOptions = {\n    passive: true,\n    capture: true\n  };\n  useGlobalEventListener(document, 'keydown', enableKeyboardInput, eventOptions);\n  useGlobalEventListener(document, 'mousedown', disableKeyboardInput, eventOptions);\n  useGlobalEventListener(document, 'touchstart', disableKeyboardInput, eventOptions);\n  return isKeyboardInputActive;\n}","map":{"version":3,"sources":["../../src/hooks/useKeyboardInputTracker.ts"],"names":["document","useDOM","isKeyboardInputActive","toggleKeyboardInput","React","enableKeyboardInput","pressedKey","Keys","disableKeyboardInput","eventOptions","passive","capture","useGlobalEventListener"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,IAAA,EAAA,UAAA,QAAA,sBAAA;AACA,SAAA,MAAA,QAAA,YAAA;AACA,SAAA,sBAAA,QAAA,0BAAA;AAEA,OAAO,SAAA,uBAAA,GAA4C;AACjD,MAAA,OAAA,GAAqBC,MAArB,EAAA;AAAA,MAAQD,QAAR,GAAA,OAAA,CAAA,QAAA;;AAEA,MAAA,eAAA,GAAqDI,KAAK,CAALA,QAAAA,CAArD,IAAqDA,CAArD;AAAA,MAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;AAAA,MAAOF,qBAAP,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MAA8BC,mBAA9B,GAAA,gBAAA,CAAA,CAAA,CAAA;;AAEA,MAAME,mBAAmB,GAAG,KAAK,CAAL,WAAA,CAAkB,UAAA,CAAA,EAAsB;AAClEF,IAAAA,mBAAmB,CAACG,UAAU,CAAVA,CAAU,CAAVA,KAAkBC,IAAI,CAA1CJ,GAAmB,CAAnBA;AAD0B,GAAA,EAA5B,EAA4B,CAA5B;AAIA,MAAMK,oBAAoB,GAAG,KAAK,CAAL,WAAA,CAAkB,YAAM;AACnDL,IAAAA,mBAAmB,CAAnBA,KAAmB,CAAnBA;AAD2B,GAAA,EAA7B,EAA6B,CAA7B;AAIA,MAAMM,YAAY,GAAG;AACnBC,IAAAA,OAAO,EADY,IAAA;AAEnBC,IAAAA,OAAO,EAAE;AAFU,GAArB;AAKAC,EAAAA,sBAAsB,CAAA,QAAA,EAAA,SAAA,EAAA,mBAAA,EAAtBA,YAAsB,CAAtBA;AACAA,EAAAA,sBAAsB,CAAA,QAAA,EAAA,WAAA,EAAA,oBAAA,EAAtBA,YAAsB,CAAtBA;AACAA,EAAAA,sBAAsB,CAAA,QAAA,EAAA,YAAA,EAAA,oBAAA,EAAtBA,YAAsB,CAAtBA;AAEA,SAAA,qBAAA;AACD","sourcesContent":["import * as React from 'react';\nimport { Keys, pressedKey } from '../lib/accessibility';\nimport { useDOM } from '../lib/dom';\nimport { useGlobalEventListener } from './useGlobalEventListener';\n\nexport function useKeyboardInputTracker(): boolean {\n  const { document } = useDOM();\n\n  const [isKeyboardInputActive, toggleKeyboardInput] = React.useState<boolean>(true);\n\n  const enableKeyboardInput = React.useCallback((e: KeyboardEvent) => {\n    toggleKeyboardInput(pressedKey(e) === Keys.TAB);\n  }, []);\n\n  const disableKeyboardInput = React.useCallback(() => {\n    toggleKeyboardInput(false);\n  }, []);\n\n  const eventOptions = {\n    passive: true,\n    capture: true,\n  };\n\n  useGlobalEventListener(document, 'keydown', enableKeyboardInput, eventOptions);\n  useGlobalEventListener(document, 'mousedown', disableKeyboardInput, eventOptions);\n  useGlobalEventListener(document, 'touchstart', disableKeyboardInput, eventOptions);\n\n  return isKeyboardInputActive;\n}\n"]},"metadata":{},"sourceType":"module"}