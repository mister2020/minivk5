{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"searchable\", \"name\", \"className\", \"getRef\", \"getRootRef\", \"popupDirection\", \"options\", \"sizeY\", \"platform\", \"style\", \"onChange\", \"onBlur\", \"onFocus\", \"onClick\", \"renderOption\", \"children\", \"emptyText\", \"onInputChange\", \"filterFn\", \"renderDropdown\", \"onOpen\", \"onClose\", \"fetching\"],\n    _excluded2 = [\"option\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from 'react';\nimport SelectMimicry from \"../SelectMimicry/SelectMimicry\";\nimport { debounce, setRef } from \"../../lib/utils\";\nimport { classNames } from \"../../lib/classNames\";\nimport CustomScrollView from \"../CustomScrollView/CustomScrollView\";\nimport { SizeType, withAdaptivity } from \"../../hoc/withAdaptivity\";\nimport { withPlatform } from \"../../hoc/withPlatform\";\nimport CustomSelectOption from \"../CustomSelectOption/CustomSelectOption\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport Input from \"../Input/Input\";\nimport { Icon20Dropdown, Icon24Dropdown } from '@vkontakte/icons';\nimport Caption from \"../Typography/Caption/Caption\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nimport Spinner from \"../Spinner/Spinner\";\n\nvar findIndexAfter = function findIndexAfter(options) {\n  var startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n\n  if (startIndex >= options.length - 1) {\n    return -1;\n  }\n\n  return options.findIndex(function (option, i) {\n    return i > startIndex && !option.disabled;\n  });\n};\n\nvar findIndexBefore = function findIndexBefore(options) {\n  var endIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : options.length;\n  var result = -1;\n\n  if (endIndex <= 0) {\n    return result;\n  }\n\n  for (var i = endIndex - 1; i >= 0; i--) {\n    var _option = options[i];\n\n    if (!_option.disabled) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n};\n\nvar warn = warnOnce('CustomSelect');\n\nvar CustomSelect = /*#__PURE__*/function (_React$Component) {\n  _inherits(CustomSelect, _React$Component);\n\n  var _super = _createSuper(CustomSelect);\n\n  function CustomSelect(props) {\n    var _this;\n\n    _classCallCheck(this, CustomSelect);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"keyboardInput\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"isControlledOutside\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"selectEl\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"scrollBoxRef\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"resetKeyboardInput\", function () {\n      _this.keyboardInput = '';\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getSelectedItem\", function () {\n      var _this$state = _this.state,\n          selectedOptionIndex = _this$state.selectedOptionIndex,\n          options = _this$state.options;\n\n      if (!options.length) {\n        return null;\n      }\n\n      return options[selectedOptionIndex];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"filter\", function (options, inputValue, filterFn) {\n      return typeof filterFn === 'function' ? options.filter(function (option) {\n        return filterFn(inputValue, option);\n      }) : options;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"open\", function () {\n      _this.setState(function (_ref) {\n        var selectedOptionIndex = _ref.selectedOptionIndex;\n        return {\n          opened: true,\n          focusedOptionIndex: selectedOptionIndex\n        };\n      }, function () {\n        var selectedOptionIndex = _this.state.selectedOptionIndex;\n\n        if (_this.isValidIndex(selectedOptionIndex)) {\n          _this.scrollToElement(selectedOptionIndex, true);\n        }\n      });\n\n      typeof _this.props.onOpen === 'function' && _this.props.onOpen();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"close\", function () {\n      _this.resetKeyboardInput();\n\n      _this.setState(function () {\n        return {\n          inputValue: '',\n          opened: false,\n          focusedOptionIndex: -1,\n          options: _this.props.options\n        };\n      });\n\n      typeof _this.props.onClose === 'function' && _this.props.onClose();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"selectFocused\", function () {\n      var focusedOptionIndex = _this.state.focusedOptionIndex;\n\n      _this.select(focusedOptionIndex);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"select\", function (index) {\n      if (!_this.isValidIndex(index)) {\n        return;\n      }\n\n      var item = _this.state.options[index];\n\n      _this.setState({\n        nativeSelectValue: item.value\n      }, function () {\n        var event = new Event('change', {\n          bubbles: true\n        });\n\n        _this.selectEl.dispatchEvent(event);\n      });\n\n      _this.close();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function () {\n      _this.state.opened ? _this.close() : _this.open();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFocus\", function () {\n      var event = new Event('focus');\n\n      _this.selectEl.dispatchEvent(event);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function () {\n      _this.close();\n\n      var event = new Event('blur');\n\n      _this.selectEl.dispatchEvent(event);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"focusOptionByIndex\", function (index) {\n      if (index < 0 || index > _this.state.options.length - 1) {\n        return;\n      }\n\n      var option = _this.state.options[index];\n\n      if (option.disabled) {\n        return;\n      }\n\n      _this.scrollToElement(index);\n\n      _this.setState(function () {\n        return {\n          focusedOptionIndex: index\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"focusOption\", function (type) {\n      var focusedOptionIndex = _this.state.focusedOptionIndex;\n      var index = focusedOptionIndex;\n\n      if (type === 'next') {\n        var nextIndex = findIndexAfter(_this.state.options, index);\n        index = nextIndex === -1 ? findIndexAfter(_this.state.options) : nextIndex; // Следующий за index или первый валидный до index\n      } else if (type === 'prev') {\n        var beforeIndex = findIndexBefore(_this.state.options, index);\n        index = beforeIndex === -1 ? findIndexBefore(_this.state.options) : beforeIndex; // Предшествующий index или последний валидный после index\n      }\n\n      _this.focusOptionByIndex(index);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOptionHover\", function (e) {\n      _this.focusOptionByIndex(Array.prototype.indexOf.call(e.currentTarget.parentNode.children, e.currentTarget));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOptionDown\", function (e) {\n      e.preventDefault();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOptionClick\", function (e) {\n      var index = Array.prototype.indexOf.call(e.currentTarget.parentNode.children, e.currentTarget);\n      var option = _this.state.options[index];\n\n      if (option && !option.disabled) {\n        _this.selectFocused();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"resetFocusedOption\", function () {\n      _this.setState({\n        focusedOptionIndex: -1\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onKeyboardInput\", function (key) {\n      var fullInput = _this.keyboardInput + key;\n\n      var optionIndex = _this.state.options.findIndex(function (option) {\n        return option.label.toLowerCase().includes(fullInput);\n      });\n\n      if (optionIndex > -1) {\n        _this.focusOptionByIndex(optionIndex);\n      }\n\n      _this.keyboardInput = fullInput;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onLabelClick\", function (e) {\n      var _this$scrollBoxRef$cu;\n\n      if ((_this$scrollBoxRef$cu = _this.scrollBoxRef.current) !== null && _this$scrollBoxRef$cu !== void 0 && _this$scrollBoxRef$cu.contains(e.target)) {\n        e.preventDefault();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onNativeSelectChange\", function (e) {\n      var value = e.currentTarget.value;\n\n      if (!_this.isControlledOutside) {\n        _this.setState({\n          selectedOptionIndex: _this.findSelectedIndex(_this.state.options, value)\n        });\n      }\n\n      if (_this.props.onChange) {\n        _this.props.onChange(e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onInputChange\", function (e) {\n      if (_this.props.onInputChange) {\n        var _options = _this.props.onInputChange(e, _this.props.options);\n\n        if (_options) {\n          if (process.env.NODE_ENV === 'development') {\n            warn('This filtration method is deprecated. Return value of onInputChange will' + ' be ignored in v5.0.0. For custom filtration please update props.options by yourself or use filterFn property');\n          }\n\n          _this.setState({\n            options: _options,\n            selectedOptionIndex: _this.findSelectedIndex(_options, _this.state.nativeSelectValue),\n            inputValue: e.target.value\n          });\n        } else {\n          _this.setState({\n            inputValue: e.target.value\n          });\n        }\n      } else {\n        var _options2 = _this.filter(_this.props.options, e.target.value, _this.props.filterFn);\n\n        _this.setState({\n          options: _options2,\n          selectedOptionIndex: _this.findSelectedIndex(_options2, _this.state.nativeSelectValue),\n          inputValue: e.target.value\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onInputKeyDown\", function (event) {\n      ['ArrowUp', 'ArrowDown', 'Escape', 'Enter'].includes(event.key) && _this.areOptionsShown && event.preventDefault();\n\n      switch (event.key) {\n        case 'ArrowUp':\n          _this.areOptionsShown && _this.focusOption('prev');\n          break;\n\n        case 'ArrowDown':\n          _this.areOptionsShown && _this.focusOption('next');\n          break;\n\n        case 'Escape':\n          _this.close();\n\n          break;\n\n        case 'Enter':\n          _this.areOptionsShown && _this.selectFocused();\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyDownSelect\", function (event) {\n      var opened = _this.state.opened;\n\n      if (event.key.length === 1 && event.key !== ' ') {\n        _this.onKeyboardInput(event.key);\n\n        return;\n      }\n\n      ['ArrowUp', 'ArrowDown', 'Escape', 'Enter'].includes(event.key) && _this.areOptionsShown && event.preventDefault();\n\n      switch (event.key) {\n        case 'ArrowUp':\n          if (opened) {\n            _this.areOptionsShown && _this.focusOption('prev');\n          } else {\n            _this.open();\n          }\n\n          break;\n\n        case 'ArrowDown':\n          if (opened) {\n            _this.areOptionsShown && _this.focusOption('next');\n          } else {\n            _this.open();\n          }\n\n          break;\n\n        case 'Escape':\n          _this.close();\n\n          break;\n\n        case 'Enter':\n        case 'Spacebar':\n        case ' ':\n          if (opened) {\n            _this.areOptionsShown && _this.selectFocused();\n          } else {\n            _this.open();\n          }\n\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyUp\", debounce(_this.resetKeyboardInput, 1000));\n\n    _defineProperty(_assertThisInitialized(_this), \"renderOption\", function (option, index) {\n      var _this$state2 = _this.state,\n          focusedOptionIndex = _this$state2.focusedOptionIndex,\n          selectedOptionIndex = _this$state2.selectedOptionIndex;\n      var renderOption = _this.props.renderOption;\n      var hovered = index === focusedOptionIndex;\n      var selected = index === selectedOptionIndex;\n      return createScopedElement(React.Fragment, {\n        key: \"\".concat(option.value)\n      }, renderOption({\n        option: option,\n        hovered: hovered,\n        children: option.label,\n        selected: selected,\n        disabled: option.disabled,\n        onClick: _this.handleOptionClick,\n        onMouseDown: _this.handleOptionDown,\n        onMouseEnter: _this.handleOptionHover\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"selectRef\", function (element) {\n      _this.selectEl = element;\n      setRef(element, _this.props.getRef);\n    });\n\n    var _value = props.value,\n        defaultValue = props.defaultValue;\n    var initialValue = _value !== undefined ? _value : defaultValue;\n    _this.keyboardInput = '';\n    _this.state = {\n      opened: false,\n      focusedOptionIndex: -1,\n      selectedOptionIndex: _this.findSelectedIndex(props.options, initialValue),\n      nativeSelectValue: initialValue,\n      options: props.options,\n      inputValue: ''\n    };\n\n    if (props.value !== undefined) {\n      _this.isControlledOutside = true;\n    }\n\n    return _this;\n  }\n\n  _createClass(CustomSelect, [{\n    key: \"areOptionsShown\",\n    get: function get() {\n      return this.scrollBoxRef.current !== null;\n    }\n  }, {\n    key: \"findSelectedIndex\",\n    value: function findSelectedIndex(options, value) {\n      return options.findIndex(function (item) {\n        value = typeof item.value === 'number' ? Number(value) : value;\n        return item.value === value;\n      });\n    }\n  }, {\n    key: \"isValidIndex\",\n    value: function isValidIndex(index) {\n      return index >= 0 && index < this.state.options.length;\n    }\n  }, {\n    key: \"scrollToElement\",\n    value: function scrollToElement(index) {\n      var center = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var dropdown = this.scrollBoxRef.current;\n      var item = dropdown ? dropdown.children[index] : null;\n\n      if (!item) {\n        return;\n      }\n\n      var dropdownHeight = dropdown.offsetHeight;\n      var scrollTop = dropdown.scrollTop;\n      var itemTop = item.offsetTop;\n      var itemHeight = item.offsetHeight;\n\n      if (center) {\n        dropdown.scrollTop = itemTop - dropdownHeight / 2 + itemHeight / 2;\n      } else if (itemTop + itemHeight > dropdownHeight + scrollTop) {\n        dropdown.scrollTop = itemTop - dropdownHeight + itemHeight;\n      } else if (itemTop < scrollTop) {\n        dropdown.scrollTop = itemTop;\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.value !== this.props.value || prevProps.options !== this.props.options) {\n        this.isControlledOutside = this.props.value !== undefined;\n\n        var _value2 = this.props.value === undefined ? this.state.nativeSelectValue : this.props.value;\n\n        var _options3 = this.props.searchable ? this.filter(this.props.options, this.state.inputValue, this.props.filterFn) : this.props.options;\n\n        this.setState({\n          nativeSelectValue: _value2,\n          selectedOptionIndex: this.findSelectedIndex(_options3, _value2),\n          options: _options3\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state3 = this.state,\n          opened = _this$state3.opened,\n          nativeSelectValue = _this$state3.nativeSelectValue;\n\n      var _this$props = this.props,\n          searchable = _this$props.searchable,\n          name = _this$props.name,\n          className = _this$props.className,\n          getRef = _this$props.getRef,\n          getRootRef = _this$props.getRootRef,\n          popupDirection = _this$props.popupDirection,\n          options = _this$props.options,\n          sizeY = _this$props.sizeY,\n          platform = _this$props.platform,\n          style = _this$props.style,\n          onChange = _this$props.onChange,\n          onBlur = _this$props.onBlur,\n          onFocus = _this$props.onFocus,\n          onClick = _this$props.onClick,\n          renderOption = _this$props.renderOption,\n          children = _this$props.children,\n          emptyText = _this$props.emptyText,\n          onInputChange = _this$props.onInputChange,\n          filterFn = _this$props.filterFn,\n          renderDropdown = _this$props.renderDropdown,\n          onOpen = _this$props.onOpen,\n          onClose = _this$props.onClose,\n          fetching = _this$props.fetching,\n          restProps = _objectWithoutProperties(_this$props, _excluded);\n\n      var selected = this.getSelectedItem();\n      var label = selected ? selected.label : undefined;\n      var defaultDropdownContent = createScopedElement(CustomScrollView, {\n        boxRef: this.scrollBoxRef\n      }, this.state.options.map(this.renderOption), this.state.options.length === 0 && createScopedElement(Caption, {\n        level: \"1\",\n        weight: \"regular\",\n        vkuiClass: \"CustomSelect__empty\"\n      }, this.props.emptyText));\n      var resolvedContent;\n\n      if (typeof renderDropdown === 'function') {\n        resolvedContent = renderDropdown({\n          defaultDropdownContent: defaultDropdownContent\n        });\n      } else if (fetching) {\n        resolvedContent = createScopedElement(\"div\", {\n          vkuiClass: \"CustomSelect__fetching\"\n        }, createScopedElement(Spinner, {\n          size: \"small\"\n        }));\n      } else {\n        resolvedContent = defaultDropdownContent;\n      }\n\n      return createScopedElement(\"label\", {\n        vkuiClass: getClassName('CustomSelect', platform),\n        className: className,\n        style: style,\n        ref: getRootRef,\n        onClick: this.onLabelClick\n      }, opened && searchable ? createScopedElement(Input, _extends({}, restProps, {\n        autoFocus: true,\n        onBlur: this.onBlur,\n        vkuiClass: classNames({\n          'CustomSelect__open': opened,\n          'CustomSelect__open--popupDirectionTop': popupDirection === 'top'\n        }),\n        value: this.state.inputValue,\n        onKeyDown: this.onInputKeyDown,\n        onChange: this.onInputChange // TODO Ожидается, что клик поймает нативный select, но его перехвает Input. К сожалению, это приводит конфликтам типизации.\n        // TODO Нужно перестать пытаться превратить CustomSelect в select. Тогда эта проблема уйдёт.\n        // @ts-ignore\n        ,\n        onClick: onClick,\n        after: sizeY === SizeType.COMPACT ? createScopedElement(Icon20Dropdown, null) : createScopedElement(Icon24Dropdown, null),\n        placeholder: restProps.placeholder\n      })) : createScopedElement(SelectMimicry, _extends({}, restProps, {\n        \"aria-hidden\": true,\n        onClick: this.onClick,\n        onKeyDown: this.handleKeyDownSelect,\n        onKeyUp: this.handleKeyUp,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        vkuiClass: classNames({\n          'CustomSelect__open': opened,\n          'CustomSelect__open--popupDirectionTop': popupDirection === 'top'\n        })\n      }), label), createScopedElement(\"select\", {\n        ref: this.selectRef,\n        name: name,\n        onChange: this.onNativeSelectChange,\n        onBlur: onBlur,\n        onFocus: onFocus,\n        onClick: onClick,\n        value: nativeSelectValue,\n        \"aria-hidden\": true,\n        vkuiClass: \"CustomSelect__control\"\n      }, options.map(function (item) {\n        return createScopedElement(\"option\", {\n          key: \"\".concat(item.value),\n          value: item.value\n        });\n      })), opened && createScopedElement(\"div\", {\n        vkuiClass: classNames('CustomSelect__options', \"CustomSelect__options--sizeY-\".concat(sizeY), {\n          'CustomSelect__options--popupDirectionTop': popupDirection === 'top'\n        }),\n        onMouseLeave: this.resetFocusedOption\n      }, resolvedContent));\n    }\n  }]);\n\n  return CustomSelect;\n}(React.Component);\n\n_defineProperty(CustomSelect, \"defaultProps\", {\n  searchable: false,\n  renderOption: function renderOption(_ref2) {\n    var option = _ref2.option,\n        props = _objectWithoutProperties(_ref2, _excluded2);\n\n    return createScopedElement(CustomSelectOption, props);\n  },\n  options: [],\n  emptyText: 'Ничего не найдено',\n  filterFn: function filterFn(value, option) {\n    return option.label.toLowerCase().includes(value.toLowerCase());\n  }\n});\n\nexport default withPlatform(withAdaptivity(CustomSelect, {\n  sizeY: true\n}));","map":{"version":3,"sources":["../../../src/components/CustomSelect/CustomSelect.tsx"],"names":["findIndexAfter","startIndex","options","i","option","findIndexBefore","endIndex","length","result","warn","warnOnce","CustomSelect","React","Component","searchable","renderOption","props","emptyText","filterFn","value","defaultValue","initialValue","opened","focusedOptionIndex","selectedOptionIndex","nativeSelectValue","inputValue","item","Number","index","event","bubbles","center","dropdown","dropdownHeight","scrollTop","itemTop","itemHeight","type","nextIndex","beforeIndex","Array","e","fullInput","optionIndex","process","debounce","prevProps","hovered","selected","children","disabled","onClick","onMouseDown","onMouseEnter","handleOptionHover","setRef","name","className","getRef","getRootRef","popupDirection","sizeY","platform","style","onChange","onBlur","onFocus","onInputChange","renderDropdown","onOpen","onClose","fetching","restProps","label","defaultDropdownContent","scrollBoxRef","resolvedContent","getClassName","onLabelClick","classNames","SizeType","placeholder","resetFocusedOption","withPlatform","withAdaptivity"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport SelectMimicry from '../SelectMimicry/SelectMimicry';\nimport { debounce, setRef } from '../../lib/utils';\nimport { classNames } from '../../lib/classNames';\nimport { NativeSelectProps } from '../NativeSelect/NativeSelect';\nimport CustomScrollView from '../CustomScrollView/CustomScrollView';\nimport { SizeType, withAdaptivity } from '../../hoc/withAdaptivity';\nimport { withPlatform } from '../../hoc/withPlatform';\nimport CustomSelectOption, { CustomSelectOptionProps } from '../CustomSelectOption/CustomSelectOption';\nimport { getClassName } from '../../helpers/getClassName';\nimport { FormFieldProps } from '../FormField/FormField';\nimport { HasPlatform } from '../../types';\nimport Input from '../Input/Input';\nimport { Icon20Dropdown, Icon24Dropdown } from '@vkontakte/icons';\nimport Caption from '../Typography/Caption/Caption';\nimport { warnOnce } from '../../lib/warnOnce';\nimport Spinner from '../Spinner/Spinner';\nimport './CustomSelect.css';\n\nconst findIndexAfter = (options: CustomSelectOptionInterface[], startIndex = -1) => {\n  if (startIndex >= options.length - 1) {\n    return -1;\n  }\n  return options.findIndex((option, i) => i > startIndex && !option.disabled);\n};\n\nconst findIndexBefore = (options: CustomSelectOptionInterface[], endIndex: number = options.length) => {\n  let result = -1;\n  if (endIndex <= 0) {\n    return result;\n  }\n  for (let i = endIndex - 1; i >= 0; i--) {\n    let option = options[i];\n\n    if (!option.disabled) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\ntype SelectValue = React.SelectHTMLAttributes<HTMLSelectElement>['value'];\n\nexport interface CustomSelectOptionInterface {\n  value: SelectValue;\n  label: string;\n  disabled?: boolean;\n  [index: string]: any;\n}\n\ninterface CustomSelectState {\n  inputValue?: string;\n  opened?: boolean;\n  focusedOptionIndex?: number;\n  selectedOptionIndex?: number;\n  nativeSelectValue?: SelectValue;\n  options?: CustomSelectOptionInterface[];\n}\n\nexport interface CustomSelectProps extends NativeSelectProps, HasPlatform, FormFieldProps {\n  /**\n   * Если `true`, то при клике на селект в нём появится текстовое поле для поиска по `options`. По умолчанию поиск\n   * производится по `option.label`.\n   */\n  searchable?: boolean;\n  /**\n   * Текст, который будет отображен, если приходит пустой `options`\n   */\n  emptyText?: string;\n  onInputChange?: (e: React.ChangeEvent, options: CustomSelectOptionInterface[]) => void | CustomSelectOptionInterface[];\n  options: Array<{\n    value: SelectValue;\n    label: string;\n    [index: string]: any;\n  }>;\n  /**\n   * Функция для кастомной фильтрации. По-умолчанию поиск производится по option.label.\n   */\n  filterFn?: false | ((value: string, option: CustomSelectOptionInterface) => boolean);\n  popupDirection?: 'top' | 'bottom';\n  /**\n   * Рендер-проп для кастомного рендера опции.\n   * В объекте аргумента приходят [свойства опции](#/CustomSelectOption?id=props)\n   */\n  renderOption?: (props: CustomSelectOptionProps) => React.ReactNode;\n  /**\n   * Рендер-проп для кастомного рендера содержимого дропдауна.\n   * В defaultDropdownContent содержится список опций в виде скроллящегося блока.\n   */\n  renderDropdown?: ({ defaultDropdownContent }: { defaultDropdownContent: React.ReactNode }) => React.ReactNode;\n  /**\n   * Если true, то в дропдауне вместо списка опций рисуется спиннер. При переданных renderDropdown и fetching: true,\n   * \"победит\" renderDropdown\n   */\n  fetching?: boolean;\n  onClose?: VoidFunction;\n  onOpen?: VoidFunction;\n}\n\ntype MouseEventHandler = (event: React.MouseEvent<HTMLElement>) => void;\n\nconst warn = warnOnce('CustomSelect');\n\nclass CustomSelect extends React.Component<CustomSelectProps, CustomSelectState> {\n  static defaultProps: CustomSelectProps = {\n    searchable: false,\n    renderOption({ option, ...props }): React.ReactNode {\n      return (\n        <CustomSelectOption {...props} />\n      );\n    },\n    options: [],\n    emptyText: 'Ничего не найдено',\n    filterFn: (value, option) => option.label.toLowerCase().includes(value.toLowerCase()),\n  };\n\n  public constructor(props: CustomSelectProps) {\n    super(props);\n\n    const { value, defaultValue } = props;\n\n    const initialValue = value !== undefined ? value : defaultValue;\n\n    this.keyboardInput = '';\n\n    this.state = {\n      opened: false,\n      focusedOptionIndex: -1,\n      selectedOptionIndex: this.findSelectedIndex(props.options, initialValue),\n      nativeSelectValue: initialValue,\n      options: props.options,\n      inputValue: '',\n    };\n\n    if (props.value !== undefined) {\n      this.isControlledOutside = true;\n    }\n  }\n\n  public state: CustomSelectState;\n  private keyboardInput: string;\n  private isControlledOutside: boolean;\n  private selectEl: HTMLSelectElement;\n  private readonly scrollBoxRef = React.createRef<HTMLDivElement>();\n\n  private readonly resetKeyboardInput = () => {\n    this.keyboardInput = '';\n  };\n\n  private readonly getSelectedItem = () => {\n    const { selectedOptionIndex, options } = this.state;\n\n    if (!options.length) {\n      return null;\n    }\n\n    return options[selectedOptionIndex];\n  };\n\n  get areOptionsShown() {\n    return this.scrollBoxRef.current !== null;\n  }\n\n  filter = (options: CustomSelectProps['options'], inputValue: string, filterFn: CustomSelectProps['filterFn']) => {\n    return typeof filterFn === 'function' ? options.filter((option) => filterFn(inputValue, option)) : options;\n  };\n\n  findSelectedIndex(options: CustomSelectOptionInterface[], value: SelectValue) {\n    return options.findIndex((item) => {\n      value = typeof item.value === 'number' ? Number(value) : value;\n      return item.value === value;\n    });\n  }\n\n  open = () => {\n    this.setState(({ selectedOptionIndex }) => ({\n      opened: true,\n      focusedOptionIndex: selectedOptionIndex,\n    }), () => {\n      const { selectedOptionIndex } = this.state;\n\n      if (this.isValidIndex(selectedOptionIndex)) {\n        this.scrollToElement(selectedOptionIndex, true);\n      }\n    });\n    typeof this.props.onOpen === 'function' && this.props.onOpen();\n  };\n\n  close = () => {\n    this.resetKeyboardInput();\n\n    this.setState(() => ({\n      inputValue: '',\n      opened: false,\n      focusedOptionIndex: -1,\n      options: this.props.options,\n    }));\n    typeof this.props.onClose === 'function' && this.props.onClose();\n  };\n\n  private isValidIndex(index: number) {\n    return index >= 0 && index < this.state.options.length;\n  }\n\n  selectFocused = () => {\n    const { focusedOptionIndex } = this.state;\n\n    this.select(focusedOptionIndex);\n  };\n\n  select = (index: number) => {\n    if (!this.isValidIndex(index)) {\n      return;\n    }\n\n    const item = this.state.options[index];\n\n    this.setState({\n      nativeSelectValue: item.value,\n    }, () => {\n      const event = new Event('change', { bubbles: true });\n      this.selectEl.dispatchEvent(event);\n    });\n    this.close();\n  };\n\n  onClick = () => {\n    this.state.opened ? this.close() : this.open();\n  };\n\n  onFocus = () => {\n    const event = new Event('focus');\n    this.selectEl.dispatchEvent(event);\n  };\n\n  onBlur = () => {\n    this.close();\n    const event = new Event('blur');\n    this.selectEl.dispatchEvent(event);\n  };\n\n  private scrollToElement(index: number, center = false) {\n    const dropdown = this.scrollBoxRef.current;\n    const item = dropdown ? (dropdown.children[index] as HTMLElement) : null;\n\n    if (!item) {\n      return;\n    }\n\n    const dropdownHeight = dropdown.offsetHeight;\n    const scrollTop = dropdown.scrollTop;\n    const itemTop = item.offsetTop;\n    const itemHeight = item.offsetHeight;\n\n    if (center) {\n      dropdown.scrollTop = itemTop - dropdownHeight / 2 + itemHeight / 2;\n    } else if (itemTop + itemHeight > dropdownHeight + scrollTop) {\n      dropdown.scrollTop = itemTop - dropdownHeight + itemHeight;\n    } else if (itemTop < scrollTop) {\n      dropdown.scrollTop = itemTop;\n    }\n  }\n\n  focusOptionByIndex = (index: number) => {\n    if (index < 0 || index > this.state.options.length - 1) {\n      return;\n    }\n\n    const option = this.state.options[index];\n\n    if (option.disabled) {\n      return;\n    }\n\n    this.scrollToElement(index);\n\n    this.setState(() => ({\n      focusedOptionIndex: index,\n    }));\n  };\n\n  focusOption = (type: 'next' | 'prev') => {\n    const { focusedOptionIndex } = this.state;\n    let index = focusedOptionIndex;\n\n    if (type === 'next') {\n      const nextIndex = findIndexAfter(this.state.options, index);\n      index = nextIndex === -1 ? findIndexAfter(this.state.options) : nextIndex; // Следующий за index или первый валидный до index\n    } else if (type === 'prev') {\n      const beforeIndex = findIndexBefore(this.state.options, index);\n      index = beforeIndex === -1 ? findIndexBefore(this.state.options) : beforeIndex; // Предшествующий index или последний валидный после index\n    }\n\n    this.focusOptionByIndex(index);\n  };\n\n  handleOptionHover: MouseEventHandler = (e: React.MouseEvent<HTMLElement>) => {\n    this.focusOptionByIndex(Array.prototype.indexOf.call(e.currentTarget.parentNode.children, e.currentTarget));\n  };\n\n  handleOptionDown: MouseEventHandler = (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n  };\n\n  handleOptionClick: MouseEventHandler = (e: React.MouseEvent<HTMLElement>) => {\n    const index = Array.prototype.indexOf.call(e.currentTarget.parentNode.children, e.currentTarget);\n    const option = this.state.options[index];\n\n    if (option && !option.disabled) {\n      this.selectFocused();\n    }\n  };\n\n  resetFocusedOption = () => {\n    this.setState({ focusedOptionIndex: -1 });\n  };\n\n  onKeyboardInput = (key: string) => {\n    const fullInput = this.keyboardInput + key;\n\n    const optionIndex = this.state.options.findIndex((option) => {\n      return option.label.toLowerCase().includes(fullInput);\n    });\n\n    if (optionIndex > -1) {\n      this.focusOptionByIndex(optionIndex);\n    }\n\n    this.keyboardInput = fullInput;\n  };\n\n  /**\n   * Нужен для правильного поведения обработчика onClick на select. Фильтрует клики, которые были сделаны по\n   * выпадающему списку.\n   */\n  onLabelClick = (e: React.MouseEvent<HTMLLabelElement>) => {\n    if (this.scrollBoxRef.current?.contains(e.target as Node)) {\n      e.preventDefault();\n    }\n  };\n\n  onNativeSelectChange: React.ChangeEventHandler<HTMLSelectElement> = (e) => {\n    const value = e.currentTarget.value;\n    if (!this.isControlledOutside) {\n      this.setState({\n        selectedOptionIndex: this.findSelectedIndex(this.state.options, value),\n      });\n    }\n    if (this.props.onChange) {\n      this.props.onChange(e);\n    }\n  };\n\n  onInputChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n    if (this.props.onInputChange) {\n      const options = this.props.onInputChange(e, this.props.options);\n      if (options) {\n        if (process.env.NODE_ENV === 'development') {\n          warn('This filtration method is deprecated. Return value of onInputChange will' +\n            ' be ignored in v5.0.0. For custom filtration please update props.options by yourself or use filterFn property');\n        }\n        this.setState({\n          options,\n          selectedOptionIndex: this.findSelectedIndex(options, this.state.nativeSelectValue),\n          inputValue: e.target.value,\n        });\n      } else {\n        this.setState({ inputValue: e.target.value });\n      }\n    } else {\n      const options = this.filter(this.props.options, e.target.value, this.props.filterFn);\n      this.setState({\n        options,\n        selectedOptionIndex: this.findSelectedIndex(options, this.state.nativeSelectValue),\n        inputValue: e.target.value,\n      });\n    }\n  };\n\n  onInputKeyDown: React.KeyboardEventHandler<HTMLInputElement> = (event) => {\n    ['ArrowUp', 'ArrowDown', 'Escape', 'Enter'].includes(event.key) && this.areOptionsShown && event.preventDefault();\n\n    switch (event.key) {\n      case 'ArrowUp':\n        this.areOptionsShown && this.focusOption('prev');\n        break;\n      case 'ArrowDown':\n        this.areOptionsShown && this.focusOption('next');\n        break;\n      case 'Escape':\n        this.close();\n        break;\n      case 'Enter':\n        this.areOptionsShown && this.selectFocused();\n        break;\n    }\n  };\n\n  handleKeyDownSelect = (event: React.KeyboardEvent) => {\n    const { opened } = this.state;\n\n    if (event.key.length === 1 && event.key !== ' ') {\n      this.onKeyboardInput(event.key);\n      return;\n    }\n\n    ['ArrowUp', 'ArrowDown', 'Escape', 'Enter'].includes(event.key) && this.areOptionsShown && event.preventDefault();\n\n    switch (event.key) {\n      case 'ArrowUp':\n        if (opened) {\n          this.areOptionsShown && this.focusOption('prev');\n        } else {\n          this.open();\n        }\n        break;\n      case 'ArrowDown':\n        if (opened) {\n          this.areOptionsShown && this.focusOption('next');\n        } else {\n          this.open();\n        }\n        break;\n      case 'Escape':\n        this.close();\n        break;\n      case 'Enter':\n      case 'Spacebar':\n      case ' ':\n        if (opened) {\n          this.areOptionsShown && this.selectFocused();\n        } else {\n          this.open();\n        }\n        break;\n    }\n  };\n\n  handleKeyUp = debounce(this.resetKeyboardInput, 1000);\n\n  componentDidUpdate(prevProps: CustomSelectProps) {\n    if (prevProps.value !== this.props.value || prevProps.options !== this.props.options) {\n      this.isControlledOutside = this.props.value !== undefined;\n      const value = this.props.value === undefined ? this.state.nativeSelectValue : this.props.value;\n      const options = this.props.searchable ? this.filter(this.props.options, this.state.inputValue, this.props.filterFn) : this.props.options;\n      this.setState({\n        nativeSelectValue: value,\n        selectedOptionIndex: this.findSelectedIndex(options, value),\n        options,\n      });\n    }\n  }\n\n  renderOption = (option: CustomSelectOptionInterface, index: number) => {\n    const { focusedOptionIndex, selectedOptionIndex } = this.state;\n    const { renderOption } = this.props;\n    const hovered = index === focusedOptionIndex;\n    const selected = index === selectedOptionIndex;\n\n    return (\n      <React.Fragment key={`${option.value}`}>\n        {renderOption({\n          option,\n          hovered,\n          children: option.label,\n          selected,\n          disabled: option.disabled,\n          onClick: this.handleOptionClick,\n          onMouseDown: this.handleOptionDown,\n          onMouseEnter: this.handleOptionHover,\n        })}\n      </React.Fragment>\n    );\n  };\n\n  selectRef = (element: HTMLSelectElement) => {\n    this.selectEl = element;\n    setRef(element, this.props.getRef);\n  };\n\n  render() {\n    const { opened, nativeSelectValue } = this.state;\n    const {\n      searchable,\n      name,\n      className,\n      getRef,\n      getRootRef,\n      popupDirection,\n      options,\n      sizeY,\n      platform,\n      style,\n      onChange,\n      onBlur,\n      onFocus,\n      onClick,\n      renderOption,\n      children,\n      emptyText,\n      onInputChange,\n      filterFn,\n      renderDropdown,\n      onOpen,\n      onClose,\n      fetching,\n      ...restProps\n    } = this.props;\n    const selected = this.getSelectedItem();\n    const label = selected ? selected.label : undefined;\n\n    const defaultDropdownContent = (\n      <CustomScrollView boxRef={this.scrollBoxRef}>\n        {this.state.options.map(this.renderOption)}\n        {this.state.options.length === 0 &&\n        <Caption level=\"1\" weight=\"regular\" vkuiClass=\"CustomSelect__empty\">\n          {this.props.emptyText}\n        </Caption>\n        }\n      </CustomScrollView>\n    );\n\n    let resolvedContent;\n\n    if (typeof renderDropdown === 'function') {\n      resolvedContent = renderDropdown({ defaultDropdownContent });\n    } else if (fetching) {\n      resolvedContent = (\n        <div vkuiClass=\"CustomSelect__fetching\">\n          <Spinner size=\"small\" />\n        </div>\n      );\n    } else {\n      resolvedContent = defaultDropdownContent;\n    }\n\n    return (\n      <label\n        vkuiClass={getClassName('CustomSelect', platform)}\n        className={className}\n        style={style}\n        ref={getRootRef}\n        onClick={this.onLabelClick}\n      >\n        {opened && searchable ?\n          <Input\n            {...restProps}\n            autoFocus\n            onBlur={this.onBlur}\n            vkuiClass={classNames({\n              'CustomSelect__open': opened,\n              'CustomSelect__open--popupDirectionTop': popupDirection === 'top',\n            })}\n            value={this.state.inputValue}\n            onKeyDown={this.onInputKeyDown}\n            onChange={this.onInputChange}\n            // TODO Ожидается, что клик поймает нативный select, но его перехвает Input. К сожалению, это приводит конфликтам типизации.\n            // TODO Нужно перестать пытаться превратить CustomSelect в select. Тогда эта проблема уйдёт.\n            // @ts-ignore\n            onClick={onClick}\n            after={sizeY === SizeType.COMPACT ? <Icon20Dropdown /> : <Icon24Dropdown />}\n            placeholder={restProps.placeholder}\n          /> :\n          <SelectMimicry\n            {...restProps}\n            aria-hidden={true}\n            onClick={this.onClick}\n            onKeyDown={this.handleKeyDownSelect}\n            onKeyUp={this.handleKeyUp}\n            onFocus={this.onFocus}\n            onBlur={this.onBlur}\n            vkuiClass={classNames({\n              'CustomSelect__open': opened,\n              'CustomSelect__open--popupDirectionTop': popupDirection === 'top',\n            })}\n          >\n            {label}\n          </SelectMimicry>\n        }\n        <select\n          ref={this.selectRef}\n          name={name}\n          onChange={this.onNativeSelectChange}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          onClick={onClick}\n          value={nativeSelectValue}\n          aria-hidden={true}\n          vkuiClass=\"CustomSelect__control\"\n        >\n          {options.map((item) => <option key={`${item.value}`} value={item.value} />)}\n        </select>\n        {opened &&\n          <div\n            vkuiClass={classNames('CustomSelect__options', `CustomSelect__options--sizeY-${sizeY}`, {\n              'CustomSelect__options--popupDirectionTop': popupDirection === 'top',\n            })}\n            onMouseLeave={this.resetFocusedOption}\n          >\n            {resolvedContent}\n          </div>\n        }\n      </label>\n    );\n  }\n}\n\nexport default withPlatform(withAdaptivity(CustomSelect, {\n  sizeY: true,\n}));\n"]},"metadata":{},"sourceType":"module"}