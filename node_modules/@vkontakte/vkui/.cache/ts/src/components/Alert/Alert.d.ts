import * as React from 'react';
import { HasPlatform } from '../../types';
import { AdaptivityProps } from '../../hoc/withAdaptivity';
import { ButtonProps } from '../Button/Button';
import './Alert.css';
export declare type AlertActionInterface = AlertProps['actions'][0] & React.AnchorHTMLAttributes<HTMLElement>;
export interface AlertAction extends Pick<ButtonProps, 'Component' | 'href'> {
    title: string;
    action?: VoidFunction;
    autoclose?: boolean;
    mode: 'cancel' | 'destructive' | 'default';
}
export interface AlertProps extends React.HTMLAttributes<HTMLElement>, HasPlatform, AdaptivityProps {
    actionsLayout?: 'vertical' | 'horizontal';
    actions?: AlertAction[];
    header?: React.ReactNode;
    text?: React.ReactNode;
    onClose?: VoidFunction;
}
export interface AlertState {
    closing: boolean;
}
declare type TransitionEndHandler = (e?: TransitionEvent) => void;
declare type ItemClickHander = (item: AlertActionInterface) => () => void;
declare class Alert extends React.Component<AlertProps, AlertState> {
    constructor(props: AlertProps);
    element: React.RefObject<HTMLDivElement>;
    private transitionFinishTimeout;
    static defaultProps: AlertProps;
    onItemClick: ItemClickHander;
    onClose: VoidFunction;
    stopPropagation: React.MouseEventHandler;
    waitTransitionFinish(eventHandler: TransitionEndHandler): void;
    renderHeader(header: React.ReactNode): JSX.Element;
    renderText(text: React.ReactNode): JSX.Element;
    renderAction: (action: AlertActionInterface, i: number) => JSX.Element;
    render(): JSX.Element;
}
declare const _default: typeof Alert;
export default _default;
