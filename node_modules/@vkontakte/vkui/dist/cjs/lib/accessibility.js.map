{"version":3,"sources":["../../../src/lib/accessibility.ts"],"names":["Keys","ACCESSIBLE_KEYS","code","ENTER","key","keyCode","SPACE","TAB","pressedKey","e","find","includes","shouldTriggerClickOnEnterOrSpace","el","target","tagName","role","getAttribute","isValidKeyboardEventTarget","isContentEditable","isNativeAnchorEl","hasAttribute","keyPressed"],"mappings":";;;;;;;;IAEYA,I;;;WAAAA,I;AAAAA,EAAAA,I;AAAAA,EAAAA,I;AAAAA,EAAAA,I;GAAAA,I,oBAAAA,I;;AAYZ,IAAMC,eAAgC,GAAG,CACvC;AACEC,EAAAA,IAAI,EAAEF,IAAI,CAACG,KADb;AAEEC,EAAAA,GAAG,EAAE,CAAC,OAAD,CAFP;AAGEC,EAAAA,OAAO,EAAE;AAHX,CADuC,EAMvC;AACEH,EAAAA,IAAI,EAAEF,IAAI,CAACM,KADb;AAEEF,EAAAA,GAAG,EAAE,CAAC,OAAD,EAAU,UAAV,EAAsB,GAAtB,CAFP;AAGEC,EAAAA,OAAO,EAAE;AAHX,CANuC,EAWvC;AACEH,EAAAA,IAAI,EAAEF,IAAI,CAACO,GADb;AAEEH,EAAAA,GAAG,EAAE,CAAC,KAAD,CAFP;AAGEC,EAAAA,OAAO,EAAE;AAHX,CAXuC,CAAzC;;AAkBO,SAASG,UAAT,CAAoBC,CAApB,EAA4C;AAAA;;AACjD,SAAO,0BAAAR,eAAe,CAACS,IAAhB,CAAqB;AAAA,QAAGN,GAAH,QAAGA,GAAH;AAAA,QAAQC,OAAR,QAAQA,OAAR;AAAA,WAAsBD,GAAG,CAACO,QAAJ,CAAaF,CAAC,CAACL,GAAf,KAAuBC,OAAO,KAAKI,CAAC,CAACJ,OAA3D;AAAA,GAArB,iFAA0FH,IAA1F,KAAkG,IAAzG;AACD;;AAEM,SAASU,gCAAT,CAA0CH,CAA1C,EAA+F;AACpG,MAAMI,EAAE,GAAGJ,CAAC,CAACK,MAAb;AACA,MAAQC,OAAR,GAAoBF,EAApB,CAAQE,OAAR;AAEA,MAAMC,IAAI,GAAGH,EAAE,CAACI,YAAH,CAAgB,MAAhB,CAAb;AAEA,MAAMC,0BAAmC,GAAGL,EAAE,CAACM,iBAAH,KAAyB,IAAzB,IACvCJ,OAAO,KAAK,OAD2B,IAEvCA,OAAO,KAAK,UAF2B,KAGtCC,IAAI,KAAK,QAAT,IAAqBA,IAAI,KAAK,MAHQ,CAA5C;AAKA,MAAMI,gBAAgB,GAAGL,OAAO,KAAK,GAAZ,IAAmBF,EAAE,CAACQ,YAAH,CAAgB,MAAhB,CAA5C;AACA,MAAMC,UAAU,GAAGd,UAAU,CAACC,CAAD,CAA7B;AAEA,SAAOS,0BAA0B,MAC/B;AACAI,EAAAA,UAAU,KAAKtB,IAAI,CAACM,KAApB,IAA6BU,IAAI,KAAK,QAAtC,IAEA;AACAM,EAAAA,UAAU,KAAKtB,IAAI,CAACG,KAApB,IAA6B,CAACiB,gBALC,CAAjC;AAOD","sourcesContent":["import * as React from 'react';\n\nexport enum Keys {\n  ENTER = 'Enter',\n  SPACE = 'Space',\n  TAB = 'Tab',\n}\n\ninterface AccessibleKey {\n  code: Keys;\n  key: string[];\n  keyCode: number;\n}\n\nconst ACCESSIBLE_KEYS: AccessibleKey[] = [\n  {\n    code: Keys.ENTER,\n    key: ['Enter'],\n    keyCode: 13,\n  },\n  {\n    code: Keys.SPACE,\n    key: ['Space', 'Spacebar', ' '],\n    keyCode: 32,\n  },\n  {\n    code: Keys.TAB,\n    key: ['Tab'],\n    keyCode: 9,\n  },\n];\n\nexport function pressedKey(e: KeyboardEvent): Keys {\n  return ACCESSIBLE_KEYS.find(({ key, keyCode }) => key.includes(e.key) || keyCode === e.keyCode)?.code || null;\n}\n\nexport function shouldTriggerClickOnEnterOrSpace(e: KeyboardEvent | React.KeyboardEvent<HTMLElement>) {\n  const el = e.target as HTMLElement;\n  const { tagName } = el;\n\n  const role = el.getAttribute('role');\n\n  const isValidKeyboardEventTarget: boolean = el.isContentEditable !== true\n    && tagName !== 'INPUT'\n    && tagName !== 'TEXTAREA'\n    && (role === 'button' || role === 'link');\n\n  const isNativeAnchorEl = tagName === 'A' && el.hasAttribute('href');\n  const keyPressed = pressedKey(e as KeyboardEvent);\n\n  return isValidKeyboardEventTarget && (\n    // trigger buttons on Space\n    keyPressed === Keys.SPACE && role === 'button'\n    ||\n    // trigger non-native links and buttons on Enter\n    keyPressed === Keys.ENTER && !isNativeAnchorEl\n  );\n}\n"],"file":"accessibility.js"}