{"version":3,"sources":["../../../../src/components/Chip/Chip.tsx"],"names":["Chip","value","option","removable","onRemove","noop","removeAriaLabel","before","after","children","restProps","onRemoveWrapper","React","useCallback","event","title"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAeA,IAAMA,IAAyB,GAAG,SAA5BA,IAA4B,OAUjB;AAAA,wBATfC,KASe;AAAA,MATfA,KASe,2BATP,EASO;AAAA,MARfC,MAQe,QARfA,MAQe;AAAA,4BAPfC,SAOe;AAAA,MAPfA,SAOe,+BAPH,IAOG;AAAA,2BANfC,QAMe;AAAA,MANfA,QAMe,8BANJC,WAMI;AAAA,kCALfC,eAKe;AAAA,MALfA,eAKe,qCALG,SAKH;AAAA,yBAJfC,MAIe;AAAA,MAJfA,MAIe,4BAJN,IAIM;AAAA,MAHfC,KAGe,QAHfA,KAGe;AAAA,MAFfC,QAEe,QAFfA,QAEe;AAAA,MADZC,SACY;AACf,MAAMC,eAAe,GAAGC,KAAK,CAACC,WAAN,CAAkB,UAACC,KAAD,EAA6B;AACrEV,IAAAA,QAAQ,CAACU,KAAD,EAAQb,KAAR,CAAR;AACD,GAFuB,EAErB,CAACG,QAAD,EAAWH,KAAX,CAFqB,CAAxB;AAGA,MAAMc,KAAK,GAAG,iCAAqBN,QAArB,CAAd;AAEA,SACE;AACE,IAAA,SAAS,EAAE,4BAAW,MAAX,EAAmB;AAAE,yBAAmBN;AAArB,KAAnB,CADb;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,kBAAYY;AAHd,KAIML,SAJN,GAME;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,IAAI,EAAC;AAA/B,KACG,yBAAaH,MAAb,KAAwB;AAAK,IAAA,SAAS,EAAC;AAAf,KAA+BA,MAA/B,CAD3B,EAEE,qCAAC,gBAAD;AAAS,IAAA,KAAK,EAAC,GAAf;AAAmB,IAAA,MAAM,EAAC,SAA1B;AAAoC,IAAA,SAAS,EAAC,eAA9C;AAA8D,IAAA,KAAK,EAAEQ,KAArE;AAA4E,mBAAY;AAAxF,KAAgGN,QAAhG,CAFF,EAGG,yBAAaD,KAAb,KAAuB;AAAK,IAAA,SAAS,EAAC;AAAf,KAA8BA,KAA9B,CAH1B,EAKGL,SAAS,IACR,qCAAC,iBAAD;AACE,IAAA,SAAS,EAAC,QADZ;AAEE,IAAA,SAAS,EAAC,cAFZ;AAGE,IAAA,OAAO,EAAEQ,eAHX;AAIE,IAAA,QAAQ,EAAE,KAJZ;AAKE,IAAA,SAAS,EAAE,KALb;AAME,4BAAeL,eAAf,cAAkCS,KAAlC;AANF,KAQE,qCAAC,mBAAD;AAAc,mBAAa;AAA3B,IARF,CANJ,CANF,CADF;AA2BD,CA3CD;;eA6Cef,I","sourcesContent":["import * as React from 'react';\nimport { Icon16Cancel } from '@vkontakte/icons';\nimport { getTitleFromChildren, hasReactNode, noop } from '../../lib/utils';\nimport { classNames } from '../../lib/classNames';\nimport Caption from '../Typography/Caption/Caption';\nimport Tappable from '../Tappable/Tappable';\nimport './Chip.css';\n\ntype ChipValue = string | number;\n\nexport interface ChipProps extends React.HTMLAttributes<HTMLDivElement> {\n  value: ChipValue;\n  option?: { value?: ChipValue };\n  onRemove?: (event?: React.MouseEvent, value?: ChipValue) => void;\n  removable?: boolean;\n  removeAriaLabel?: string;\n  before?: React.ReactNode;\n  after?: React.ReactNode;\n}\n\nconst Chip: React.FC<ChipProps> = ({\n  value = '',\n  option,\n  removable = true,\n  onRemove = noop,\n  removeAriaLabel = 'Удалить',\n  before = null,\n  after,\n  children,\n  ...restProps\n}: ChipProps) => {\n  const onRemoveWrapper = React.useCallback((event: React.MouseEvent) => {\n    onRemove(event, value);\n  }, [onRemove, value]);\n  const title = getTitleFromChildren(children);\n\n  return (\n    <div\n      vkuiClass={classNames('Chip', { 'Chip--removable': removable })}\n      role=\"option\"\n      aria-label={title}\n      {...restProps}\n    >\n      <div vkuiClass=\"Chip__in\" role=\"presentation\">\n        {hasReactNode(before) && <div vkuiClass=\"Chip__before\">{before}</div>}\n        <Caption level=\"1\" weight=\"regular\" vkuiClass=\"Chip__content\" title={title} aria-hidden=\"true\">{children}</Caption>\n        {hasReactNode(after) && <div vkuiClass=\"Chip__after\">{after}</div>}\n\n        {removable &&\n          <Tappable\n            Component=\"button\"\n            vkuiClass=\"Chip__remove\"\n            onClick={onRemoveWrapper}\n            hasHover={false}\n            hasActive={false}\n            aria-label={`${removeAriaLabel} ${title}`}\n          >\n            <Icon16Cancel aria-hidden={true} />\n          </Tappable>\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default Chip;\n"],"file":"Chip.js"}