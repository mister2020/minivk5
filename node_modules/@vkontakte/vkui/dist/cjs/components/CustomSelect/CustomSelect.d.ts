import * as React from 'react';
import { NativeSelectProps } from '../NativeSelect/NativeSelect';
import { CustomSelectOptionProps } from '../CustomSelectOption/CustomSelectOption';
import { FormFieldProps } from '../FormField/FormField';
import { HasPlatform } from '../../types';
import './CustomSelect.css';
declare type SelectValue = React.SelectHTMLAttributes<HTMLSelectElement>['value'];
export interface CustomSelectOptionInterface {
    value: SelectValue;
    label: string;
    disabled?: boolean;
    [index: string]: any;
}
interface CustomSelectState {
    inputValue?: string;
    opened?: boolean;
    focusedOptionIndex?: number;
    selectedOptionIndex?: number;
    nativeSelectValue?: SelectValue;
    options?: CustomSelectOptionInterface[];
}
export interface CustomSelectProps extends NativeSelectProps, HasPlatform, FormFieldProps {
    /**
     * Если `true`, то при клике на селект в нём появится текстовое поле для поиска по `options`. По умолчанию поиск
     * производится по `option.label`.
     */
    searchable?: boolean;
    /**
     * Текст, который будет отображен, если приходит пустой `options`
     */
    emptyText?: string;
    onInputChange?: (e: React.ChangeEvent, options: CustomSelectOptionInterface[]) => void | CustomSelectOptionInterface[];
    options: Array<{
        value: SelectValue;
        label: string;
        [index: string]: any;
    }>;
    /**
     * Функция для кастомной фильтрации. По-умолчанию поиск производится по option.label.
     */
    filterFn?: false | ((value: string, option: CustomSelectOptionInterface) => boolean);
    popupDirection?: 'top' | 'bottom';
    /**
     * Рендер-проп для кастомного рендера опции.
     * В объекте аргумента приходят [свойства опции](#/CustomSelectOption?id=props)
     */
    renderOption?: (props: CustomSelectOptionProps) => React.ReactNode;
    /**
     * Рендер-проп для кастомного рендера содержимого дропдауна.
     * В defaultDropdownContent содержится список опций в виде скроллящегося блока.
     */
    renderDropdown?: ({ defaultDropdownContent }: {
        defaultDropdownContent: React.ReactNode;
    }) => React.ReactNode;
    /**
     * Если true, то в дропдауне вместо списка опций рисуется спиннер. При переданных renderDropdown и fetching: true,
     * "победит" renderDropdown
     */
    fetching?: boolean;
    onClose?: VoidFunction;
    onOpen?: VoidFunction;
}
declare type MouseEventHandler = (event: React.MouseEvent<HTMLElement>) => void;
declare class CustomSelect extends React.Component<CustomSelectProps, CustomSelectState> {
    static defaultProps: CustomSelectProps;
    constructor(props: CustomSelectProps);
    state: CustomSelectState;
    private keyboardInput;
    private isControlledOutside;
    private selectEl;
    private readonly scrollBoxRef;
    private readonly resetKeyboardInput;
    private readonly getSelectedItem;
    get areOptionsShown(): boolean;
    filter: (options: {
        [index: string]: any;
        value: string | number | readonly string[];
        label: string;
    }[], inputValue: string, filterFn: false | ((value: string, option: CustomSelectOptionInterface) => boolean)) => {
        [index: string]: any;
        value: string | number | readonly string[];
        label: string;
    }[];
    findSelectedIndex(options: CustomSelectOptionInterface[], value: SelectValue): number;
    open: () => void;
    close: () => void;
    private isValidIndex;
    selectFocused: () => void;
    select: (index: number) => void;
    onClick: () => void;
    onFocus: () => void;
    onBlur: () => void;
    private scrollToElement;
    focusOptionByIndex: (index: number) => void;
    focusOption: (type: "next" | "prev") => void;
    handleOptionHover: MouseEventHandler;
    handleOptionDown: MouseEventHandler;
    handleOptionClick: MouseEventHandler;
    resetFocusedOption: () => void;
    onKeyboardInput: (key: string) => void;
    /**
     * Нужен для правильного поведения обработчика onClick на select. Фильтрует клики, которые были сделаны по
     * выпадающему списку.
     */
    onLabelClick: (e: React.MouseEvent<HTMLLabelElement, MouseEvent>) => void;
    onNativeSelectChange: React.ChangeEventHandler<HTMLSelectElement>;
    onInputChange: React.ChangeEventHandler<HTMLInputElement>;
    onInputKeyDown: React.KeyboardEventHandler<HTMLInputElement>;
    handleKeyDownSelect: (event: React.KeyboardEvent<Element>) => void;
    handleKeyUp: () => void;
    componentDidUpdate(prevProps: CustomSelectProps): void;
    renderOption: (option: CustomSelectOptionInterface, index: number) => JSX.Element;
    selectRef: (element: HTMLSelectElement) => void;
    render(): JSX.Element;
}
declare const _default: typeof CustomSelect;
export default _default;
