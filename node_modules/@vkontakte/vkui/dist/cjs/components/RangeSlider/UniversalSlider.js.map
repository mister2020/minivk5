{"version":3,"sources":["../../../../src/components/RangeSlider/UniversalSlider.tsx"],"names":["UniversalSliderDumb","min","max","step","value","defaultValue","onChange","getRootRef","sizeY","disabled","restProps","platform","start","end","isRange","gesture","React","useRef","dragging","startX","containerWidth","current","container","thumbStart","thumbEnd","offsetToValue","absolute","updateRange","nextValue","snapDirection","pos","target","Math","abs","onStart","e","boundingRect","getBoundingClientRect","width","absolutePosition","left","originalEvent","stopPropagation","onMove","shiftX","preventDefault","onEnd","toPercent","v","draggerStyle","join","UniversalSlider"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport Touch, { TouchEvent, TouchEventHandler } from '../Touch/Touch';\nimport { getClassName } from '../../helpers/getClassName';\nimport { classNames } from '../../lib/classNames';\nimport { HasRootRef } from '../../types';\nimport { rescale } from '../../helpers/math';\nimport { withAdaptivity, AdaptivityProps } from '../../hoc/withAdaptivity';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport '../Slider/Slider.css';\n\nexport type UniversalValue = [number | null, number];\n\nexport interface UniversalSliderProps<Value> extends\n  HasRootRef<HTMLDivElement>,\n  Omit<React.HTMLAttributes<HTMLDivElement>, 'value' | 'defaultValue' | 'onChange'>,\n  AdaptivityProps {\n  min?: number;\n  max?: number;\n  step?: number;\n  value?: Value;\n  defaultValue?: Value;\n  disabled?: boolean;\n  onChange?(value: Value, e: TouchEvent): void;\n}\n\nconst UniversalSliderDumb: React.FC<UniversalSliderProps<UniversalValue>> = ({\n  min, max, step,\n  value, defaultValue, onChange,\n  getRootRef,\n  sizeY,\n  disabled,\n  ...restProps\n}) => {\n  const platform = usePlatform();\n  const [start, end] = value;\n  const isRange = start != null;\n  const gesture = React.useRef({\n    dragging: false as false | 'start' | 'end',\n    startX: 0,\n    containerWidth: 0,\n  }).current;\n  const container = useExternRef(getRootRef);\n  const thumbStart = React.useRef<HTMLDivElement>();\n  const thumbEnd = React.useRef<HTMLDivElement>();\n\n  const offsetToValue = (absolute: number) => {\n    return rescale(absolute, [0, gesture.containerWidth], [min, max], { step });\n  };\n\n  const updateRange = (nextValue: number): UniversalValue => {\n    if (start == null) {\n      return [null, nextValue];\n    }\n\n    const { dragging } = gesture;\n    if (dragging === 'start') {\n      if (nextValue > end) {\n        // \"перехватиться\", если перетянули за конец\n        gesture.dragging = 'end';\n        return [end, nextValue];\n      }\n      return [nextValue, end];\n    }\n    if (dragging === 'end') {\n      if (nextValue < start) {\n        // \"перехватиться\", если перетянули за начало\n        gesture.dragging = 'start';\n        return [nextValue, start];\n      }\n      return [start, nextValue];\n    }\n\n    return value;\n  };\n\n  const snapDirection = (pos: number, target: EventTarget) => {\n    if (target === thumbStart.current) {\n      return 'start';\n    }\n    if (target === thumbEnd.current) {\n      return 'end';\n    }\n    return Math.abs(start - pos) <= Math.abs(end - pos) ? 'start' : 'end';\n  };\n\n  const onStart: TouchEventHandler = (e: TouchEvent) => {\n    const boundingRect = container.current.getBoundingClientRect();\n    gesture.containerWidth = boundingRect.width;\n\n    const absolutePosition = e.startX - boundingRect.left;\n    const pos = offsetToValue(absolutePosition);\n    gesture.dragging = snapDirection(pos, e.originalEvent.target);\n    gesture.startX = absolutePosition;\n\n    onChange(updateRange(pos), e);\n    e.originalEvent.stopPropagation();\n  };\n\n  const onMove: TouchEventHandler = (e: TouchEvent) => {\n    onChange(updateRange(offsetToValue(gesture.startX + (e.shiftX || 0))), e);\n\n    e.originalEvent.stopPropagation();\n    e.originalEvent.preventDefault();\n  };\n\n  const onEnd: TouchEventHandler = (e) => {\n    gesture.dragging = false;\n    e.originalEvent.stopPropagation();\n  };\n\n  const toPercent = (v: number) => (v - min) / (max - min) * 100;\n  const draggerStyle = isRange ? {\n    width: `${toPercent(end) - toPercent(start)}%`,\n    left: `${toPercent(start)}%`,\n  } : {\n    width: `${toPercent(end)}%`,\n  };\n\n  return (\n    <Touch\n      data-value={isRange ? value.join(',') : value}\n      {...restProps}\n      {...(disabled ? {} : { onStart, onMove, onEnd })}\n      vkuiClass={classNames(\n        getClassName('Slider', platform),\n        `Slider--sizeY-${sizeY}`,\n        disabled && 'Slider--disabled',\n      )}\n    >\n      <div ref={container} vkuiClass=\"Slider__in\">\n        <div vkuiClass=\"Slider__dragger\" style={draggerStyle}>\n          {isRange && <span vkuiClass={classNames('Slider__thumb', 'Slider__thumb--start')} ref={thumbStart} />}\n          <span vkuiClass={classNames('Slider__thumb', 'Slider__thumb--end')} ref={thumbEnd} />\n        </div>\n      </div>\n    </Touch>\n  );\n};\n\nexport const UniversalSlider = withAdaptivity(UniversalSliderDumb, {\n  sizeY: true,\n});\n"],"file":"UniversalSlider.js"}