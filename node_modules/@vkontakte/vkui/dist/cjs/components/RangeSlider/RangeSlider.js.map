{"version":3,"sources":["../../../../src/components/RangeSlider/RangeSlider.tsx"],"names":["RangeSlider","onChange","defaultValue","props","isControlled","Boolean","value","React","useState","min","max","localValue","setValue","start","end","handleChange","useCallback","nextValue","event","disabled","defaultProps","step"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AAKA,IAAMA,WAAuC,GAAG,SAA1CA,WAA0C,OAA4D;AAAA,MAAzDC,QAAyD,QAAzDA,QAAyD;AAAA,MAA/CC,YAA+C,QAA/CA,YAA+C;AAAA,MAA9BC,KAA8B;AAC1G,MAAMC,YAAY,GAAGC,OAAO,CAACF,KAAK,CAACG,KAAP,CAA5B;;AAEA,wBAA+BC,KAAK,CAACC,QAAN,CAAeN,YAAY,IAAI,CAACC,KAAK,CAACM,GAAP,EAAYN,KAAK,CAACO,GAAlB,CAA/B,CAA/B;AAAA;AAAA,MAAOC,UAAP;AAAA,MAAmBC,QAAnB;;AACA,cAAqBT,KAAK,CAACG,KAAN,IAAeK,UAApC;AAAA;AAAA,MAAOE,KAAP;AAAA,MAAcC,GAAd;;AACA,MAAMR,KAAK,GAAG,CAAC,iBAAMO,KAAN,EAAaV,KAAK,CAACM,GAAnB,EAAwBN,KAAK,CAACO,GAA9B,CAAD,EAAqC,iBAAMI,GAAN,EAAWX,KAAK,CAACM,GAAjB,EAAsBN,KAAK,CAACO,GAA5B,CAArC,CAAd;AAEA,MAAMK,YAA0C,GAAGR,KAAK,CAACS,WAAN,CAAkB,UAACC,SAAD,EAAYC,KAAZ,EAAsB;AACzF,QAAIf,KAAK,CAACgB,QAAN,IAAkBb,KAAK,CAAC,CAAD,CAAL,KAAaW,SAAS,CAAC,CAAD,CAAtB,IAA6BX,KAAK,CAAC,CAAD,CAAL,KAAaW,SAAS,CAAC,CAAD,CAAzE,EAA8E;AAC5E;AACD;;AACD,KAACb,YAAD,IAAiBQ,QAAQ,CAACK,SAAD,CAAzB;AACAhB,IAAAA,QAAQ,IAAIA,QAAQ,CAACgB,SAAD,EAAYC,KAAZ,CAApB;AACD,GANkD,EAMhD,CAACjB,QAAD,EAAWG,YAAX,EAAyBE,KAAzB,CANgD,CAAnD;AAQA,SAAO,qCAAC,gCAAD,6BAAqBH,KAArB;AAA4B,IAAA,KAAK,EAAEG,KAAnC;AAA0C,IAAA,QAAQ,EAAES;AAApD,KAAP;AACD,CAhBD;;AAkBAf,WAAW,CAACoB,YAAZ,GAA2B;AACzBX,EAAAA,GAAG,EAAE,CADoB;AAEzBC,EAAAA,GAAG,EAAE,GAFoB;AAGzBW,EAAAA,IAAI,EAAE;AAHmB,CAA3B;eAMerB,W","sourcesContent":["import * as React from 'react';\nimport { clamp } from '../../helpers/math';\nimport { UniversalSlider, UniversalSliderProps } from './UniversalSlider';\n\nexport type Value = [number, number];\nexport type RangeSliderProps = UniversalSliderProps<Value>;\n\nconst RangeSlider: React.FC<RangeSliderProps> = ({ onChange, defaultValue, ...props }: RangeSliderProps) => {\n  const isControlled = Boolean(props.value);\n\n  const [localValue, setValue] = React.useState(defaultValue || [props.min, props.max] as Value);\n  const [start, end] = props.value || localValue;\n  const value = [clamp(start, props.min, props.max), clamp(end, props.min, props.max)] as Value;\n\n  const handleChange: RangeSliderProps['onChange'] = React.useCallback((nextValue, event) => {\n    if (props.disabled || value[0] === nextValue[0] && value[1] === nextValue[1]) {\n      return;\n    }\n    !isControlled && setValue(nextValue);\n    onChange && onChange(nextValue, event);\n  }, [onChange, isControlled, value]);\n\n  return <UniversalSlider {...props} value={value} onChange={handleChange} />;\n};\n\nRangeSlider.defaultProps = {\n  min: 0,\n  max: 100,\n  step: 0,\n};\n\nexport default RangeSlider;\n"],"file":"RangeSlider.js"}