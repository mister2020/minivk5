{"version":3,"sources":["../../../../src/components/ChipsInput/useChipsInput.ts"],"names":["useChipsInput","props","value","getOptionValue","onChange","onInputChange","getNewOptionData","React","useState","inputValue","fieldValue","setFieldValue","selectedOptions","setSelectedOptions","clearInput","useCallback","target","handleInputChange","e","toggleOption","newOption","newSelectedOptions","filter","option","push","addOption","addOptionFromInput","trimmedValue","trim","undefined","removeOption","useEffect"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ChipsInputOption, ChipsInputProps, ChipsInputValue } from './ChipsInput';\n\nexport const useChipsInput = <Option extends ChipsInputOption>(props: Partial<ChipsInputProps<Option>>) => {\n  const { value, getOptionValue, onChange, onInputChange, getNewOptionData } = props;\n\n  const [fieldValue, setFieldValue] = React.useState(props.inputValue);\n  const [selectedOptions, setSelectedOptions] = React.useState(value);\n\n  const clearInput = React.useCallback(() => {\n    setFieldValue('');\n    onInputChange({ target: { value: '' } } as any);\n  }, [onInputChange]);\n\n  const handleInputChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFieldValue(e.target.value);\n    onInputChange(e);\n  }, [onInputChange]);\n\n  const toggleOption = React.useCallback((newOption: Option, value?: boolean) => {\n    const newSelectedOptions = selectedOptions.filter((option: Option) => getOptionValue(newOption) !== getOptionValue(option));\n\n    if (value === true) {\n      newSelectedOptions.push(newOption);\n    }\n\n    setSelectedOptions(newSelectedOptions);\n    onChange(newSelectedOptions);\n  }, [selectedOptions, getOptionValue, onChange]);\n\n  const addOption = React.useCallback((newOption: Option) => toggleOption(newOption, true), [toggleOption]);\n  const addOptionFromInput = React.useCallback(() => {\n    const trimmedValue = fieldValue?.trim();\n\n    if (trimmedValue) {\n      addOption(getNewOptionData(undefined, trimmedValue));\n      clearInput();\n    }\n  }, [addOption, clearInput, getNewOptionData, fieldValue]);\n  const removeOption = React.useCallback((value: ChipsInputValue) => {\n    toggleOption(getNewOptionData(undefined, value as string), false);\n  }, [toggleOption, getNewOptionData]);\n\n  React.useEffect(() => {\n    setSelectedOptions(value);\n\n    return () => setSelectedOptions([]);\n  }, [props.value]);\n\n  React.useEffect(() => {\n    setFieldValue(props.inputValue);\n\n    return () => setFieldValue('');\n  }, [props.inputValue]);\n\n  return { fieldValue, setFieldValue, selectedOptions, setSelectedOptions, clearInput, toggleOption, addOption, addOptionFromInput, removeOption, handleInputChange };\n};\n"],"file":"useChipsInput.js"}