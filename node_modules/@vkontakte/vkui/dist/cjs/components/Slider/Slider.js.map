{"version":3,"sources":["../../../../src/components/Slider/Slider.tsx"],"names":["Slider","onChange","defaultValue","props","isControlled","value","React","useState","min","localValue","setValue","max","handleChange","useCallback","nextValue","event","disabled","rangeValue","useMemo","defaultProps","step"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AAIA,IAAMA,MAAM,GAAG,SAATA,MAAS,OAAuD;AAAA,MAApDC,QAAoD,QAApDA,QAAoD;AAAA,MAA1CC,YAA0C,QAA1CA,YAA0C;AAAA,MAAzBC,KAAyB;AACpE,MAAMC,YAAY,GAAGD,KAAK,CAACE,KAAN,IAAe,IAApC;;AAEA,wBAA+BC,KAAK,CAACC,QAAN,CAAeL,YAAY,IAAI,IAAhB,GAAuBC,KAAK,CAACK,GAA7B,GAAmCN,YAAlD,CAA/B;AAAA;AAAA,MAAOO,UAAP;AAAA,MAAmBC,QAAnB;;AACA,MAAML,KAAK,GAAG,iBAAMD,YAAY,GAAGD,KAAK,CAACE,KAAT,GAAiBI,UAAnC,EAA+CN,KAAK,CAACK,GAArD,EAA0DL,KAAK,CAACQ,GAAhE,CAAd;AAEA,MAAMC,YAA8D,GAAGN,KAAK,CAACO,WAAN,CAAkB,UAACC,SAAD,EAAYC,KAAZ,EAAsB;AAC7G,QAAIZ,KAAK,CAACa,QAAN,IAAkBX,KAAK,KAAKS,SAAS,CAAC,CAAD,CAAzC,EAA8C;AAC5C;AACD;;AACD,KAACV,YAAD,IAAiBM,QAAQ,CAACI,SAAS,CAAC,CAAD,CAAV,CAAzB;AACAb,IAAAA,QAAQ,IAAIA,QAAQ,CAACa,SAAS,CAAC,CAAD,CAAV,EAAeC,KAAf,CAApB;AACD,GANsE,EAMpE,CAACd,QAAD,EAAWG,YAAX,EAAyBC,KAAzB,CANoE,CAAvE;AAQA,MAAMY,UAA0B,GAAGX,KAAK,CAACY,OAAN,CAAc;AAAA,WAAM,CAAC,IAAD,EAAOb,KAAP,CAAN;AAAA,GAAd,EAAmC,CAACA,KAAD,CAAnC,CAAnC;AACA,SAAO,qCAAC,gCAAD,6BAAqBF,KAArB;AAA4B,IAAA,KAAK,EAAEc,UAAnC;AAA+C,IAAA,QAAQ,EAAEL;AAAzD,KAAP;AACD,CAhBD;;AAkBAZ,MAAM,CAACmB,YAAP,GAAsB;AACpBX,EAAAA,GAAG,EAAE,CADe;AAEpBG,EAAAA,GAAG,EAAE,GAFe;AAGpBS,EAAAA,IAAI,EAAE;AAHc,CAAtB;eAMepB,M","sourcesContent":["import * as React from 'react';\nimport { clamp } from '../../helpers/math';\nimport { UniversalSlider, UniversalSliderProps, UniversalValue } from '../RangeSlider/UniversalSlider';\n\nexport type SliderProps = UniversalSliderProps<number>;\n\nconst Slider = ({ onChange, defaultValue, ...props }: SliderProps) => {\n  const isControlled = props.value != null;\n\n  const [localValue, setValue] = React.useState(defaultValue == null ? props.min : defaultValue);\n  const value = clamp(isControlled ? props.value : localValue, props.min, props.max);\n\n  const handleChange: UniversalSliderProps<UniversalValue>['onChange'] = React.useCallback((nextValue, event) => {\n    if (props.disabled || value === nextValue[1]) {\n      return;\n    }\n    !isControlled && setValue(nextValue[1]);\n    onChange && onChange(nextValue[1], event);\n  }, [onChange, isControlled, value]);\n\n  const rangeValue: [null, number] = React.useMemo(() => [null, value], [value]);\n  return <UniversalSlider {...props} value={rangeValue} onChange={handleChange} />;\n};\n\nSlider.defaultProps = {\n  min: 0,\n  max: 100,\n  step: 0,\n};\n\nexport default Slider;\n"],"file":"Slider.js"}