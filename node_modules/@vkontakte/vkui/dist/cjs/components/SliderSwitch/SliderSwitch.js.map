{"version":3,"sources":["../../../../src/components/SliderSwitch/SliderSwitch.tsx"],"names":["SliderSwitch","props","value","onSwitch","setState","activeValue","options","hoveredOptionId","event","key","preventDefault","state","find","option","firstButton","current","focus","secondButton","React","createRef","name","_activeValue","restProps","firstOption","secondOption","firstActive","secondActive","switchByKey","resetFocusedOption","handleFirstClick","handleFirstHover","handleSecondClick","handleSecondHover","nextProps","prevState","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport SliderSwitchButton from './SliderSwitchButton';\nimport { classNames } from '../../lib/classNames';\nimport { HasPlatform } from '../../types';\nimport './SliderSwitch.css';\n\nexport interface SliderSwitchOptionInterface {\n  name: string;\n  value: string | number;\n}\n\nexport interface SliderSwitchProps extends React.HTMLAttributes<HTMLDivElement>, HasPlatform {\n  options: Array<{\n    name: string;\n    value: string | number;\n  }>;\n  activeValue?: SliderSwitchOptionInterface['value'];\n  name?: string;\n  onSwitch?: (value: SliderSwitchOptionInterface['value']) => void;\n}\n\ninterface SliderSwitchState {\n  activeValue: SliderSwitchOptionInterface['value'];\n  hoveredOptionId: number;\n}\n\nexport default class SliderSwitch extends React.Component<SliderSwitchProps, SliderSwitchState> {\n  public constructor(props: SliderSwitchProps) {\n    super(props);\n\n    this.state = {\n      activeValue: props.activeValue ?? '',\n      hoveredOptionId: -1,\n    };\n\n    this.firstButton = React.createRef();\n    this.secondButton = React.createRef();\n  }\n\n  static defaultProps = {\n    options: [{ name: '', value: '' }, { name: '', value: '' }],\n  };\n\n  firstButton: React.RefObject<HTMLDivElement>;\n  secondButton: React.RefObject<HTMLDivElement>;\n\n  onSwitch = (value: SliderSwitchOptionInterface['value']) => {\n    const { onSwitch } = this.props;\n\n    this.setState(() => ({\n      activeValue: value,\n    }), () => {\n      onSwitch && onSwitch(value);\n    });\n  };\n\n  handleFirstClick = () => {\n    const { options } = this.props;\n    const { value } = options[0];\n\n    this.onSwitch(value);\n  };\n\n  handleSecondClick = () => {\n    const { options } = this.props;\n    const { value } = options[1];\n\n    this.onSwitch(value);\n  };\n\n  handleFirstHover = () => {\n    this.setState(() =>({\n      hoveredOptionId: 0,\n    }));\n  };\n\n  handleSecondHover = () => {\n    this.setState(() =>({\n      hoveredOptionId: 1,\n    }));\n  };\n\n  resetFocusedOption = () => {\n    this.setState(() => ({\n      hoveredOptionId: -1,\n    }));\n  };\n\n  switchByKey = (event: React.KeyboardEvent) => {\n    if (event.key !== 'Enter' && event.key !== 'Spacebar' && event.key !== ' ') {\n      return;\n    }\n    event.preventDefault();\n\n    const { options } = this.props;\n    const { activeValue } = this.state;\n    const { value } = options.find((option) => option.value !== activeValue);\n\n    this.onSwitch(value);\n\n    if (options[0].value === value) {\n      this.firstButton.current.focus();\n    } else {\n      this.secondButton.current.focus();\n    }\n  };\n\n  static getDerivedStateFromProps(nextProps: SliderSwitchProps, prevState: SliderSwitchState) {\n    if (nextProps.activeValue && nextProps.activeValue !== prevState.activeValue) {\n      return {\n        activeValue: nextProps.activeValue,\n      };\n    }\n\n    return null;\n  }\n\n  public render() {\n    const { name, options, activeValue: _activeValue, onSwitch, ...restProps } = this.props;\n    const { activeValue, hoveredOptionId } = this.state;\n\n    const [firstOption, secondOption] = options;\n    const firstActive = firstOption.value === activeValue;\n    const secondActive = secondOption.value === activeValue;\n\n    return (\n      <div\n        {...restProps}\n        vkuiClass=\"SliderSwitch\"\n        onKeyDown={this.switchByKey}\n        onMouseLeave={this.resetFocusedOption}\n      >\n        {!firstActive && !secondActive &&\n          <div vkuiClass=\"SliderSwitch__border\" />\n        }\n        <div vkuiClass={classNames(\n          'SliderSwitch__slider',\n          {\n            ['SliderSwitch--firstActive']: firstActive,\n            ['SliderSwitch--secondActive']: secondActive,\n          },\n        )} />\n        <input type=\"hidden\" name={name} value={activeValue} />\n        <SliderSwitchButton\n          active={firstActive}\n          hovered={hoveredOptionId === 0}\n          aria-pressed={firstActive}\n          onClick={this.handleFirstClick}\n          onMouseEnter={this.handleFirstHover}\n          getRootRef={this.firstButton}\n        >\n          {firstOption.name}\n        </SliderSwitchButton>\n        <SliderSwitchButton\n          active={secondActive}\n          hovered={hoveredOptionId === 1}\n          onClick={this.handleSecondClick}\n          onMouseEnter={this.handleSecondHover}\n          getRootRef={this.secondButton}\n        >\n          {secondOption.name}\n        </SliderSwitchButton>\n      </div>\n    );\n  }\n}\n"],"file":"SliderSwitch.js"}