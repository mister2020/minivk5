{"version":3,"sources":["../../../src/components/ChipsInput/ChipsInput.tsx"],"names":["React","FormField","classNames","Chip","noop","useChipsInput","useAdaptivity","prefixClass","useExternRef","ChipsInput","props","style","value","onChange","onInputChange","onKeyDown","onBlur","onFocus","children","className","inputValue","getRef","getRootRef","placeholder","getOptionValue","getOptionLabel","getNewOptionData","renderChip","after","inputAriaLabel","restProps","sizeY","useState","focused","setFocused","fieldValue","addOptionFromInput","removeOption","selectedOptions","handleInputChange","inputRef","isDisabled","disabled","readOnly","handleKeyDown","e","preventDefault","key","defaultPrevented","length","handleBlur","handleFocus","handleChipRemove","_","handleClick","current","focus","map","option","label","onRemove","chipsInputDefaultProps","type","rest","defaultProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { HasAlign, HasRef, HasRootRef } from '../../types';\nimport { FormField, FormFieldProps } from '../FormField/FormField';\nimport { classNames } from '../../lib/classNames';\nimport Chip, { ChipProps } from '../Chip/Chip';\nimport { noop } from '../../lib/utils';\nimport { useChipsInput } from './useChipsInput';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { prefixClass } from '../../lib/prefixClass';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport './ChipsInput.css';\n\nexport type ChipsInputValue = string | number;\n\nexport interface ChipsInputOption {\n  value?: ChipsInputValue;\n  label?: string;\n  [otherProp: string]: any;\n}\n\nexport interface RenderChip<Option extends ChipsInputOption> extends ChipProps {\n  label: string;\n  option: Option;\n  disabled: boolean;\n}\n\nexport interface ChipsInputProps<Option extends ChipsInputOption> extends\n  Omit<React.InputHTMLAttributes<HTMLInputElement>, 'value' | 'onChange'>,\n  HasRef<HTMLInputElement>,\n  HasRootRef<HTMLDivElement>,\n  HasAlign,\n  FormFieldProps {\n  value: Option[];\n  inputValue?: string;\n  onChange?: (o: Option[]) => void;\n  onInputChange?: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  getOptionValue?: (o?: Option) => ChipsInputValue;\n  getOptionLabel?: (o?: Option) => string;\n  getNewOptionData?: (v?: ChipsInputValue, l?: string) => Option;\n  renderChip?: (props?: RenderChip<Option>) => React.ReactNode;\n  inputAriaLabel?: string;\n}\n\nconst ChipsInput = <Option extends ChipsInputOption>(props: ChipsInputProps<Option>) => {\n  const { style, value, onChange, onInputChange, onKeyDown, onBlur, onFocus, children, className, inputValue,\n    getRef, getRootRef, placeholder, getOptionValue, getOptionLabel, getNewOptionData, renderChip,\n    after, inputAriaLabel, ...restProps } = props;\n  const { sizeY } = useAdaptivity();\n\n  const [focused, setFocused] = React.useState(false);\n  const { fieldValue, addOptionFromInput, removeOption, selectedOptions, handleInputChange } = useChipsInput(props);\n  const inputRef = useExternRef(getRef);\n\n  const isDisabled = restProps.disabled || restProps.readOnly;\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    onKeyDown(e);\n\n    if (e.key === 'Backspace' && !e.defaultPrevented && !fieldValue && selectedOptions.length) {\n      removeOption(getOptionValue(selectedOptions[selectedOptions.length - 1]));\n      e.preventDefault();\n    }\n\n    if (e.key === 'Enter' && !e.defaultPrevented && fieldValue) {\n      addOptionFromInput();\n      e.preventDefault();\n    }\n  };\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    if (focused) {\n      setFocused(false);\n    }\n    onBlur(e);\n  };\n\n  const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    if (!focused) {\n      setFocused(true);\n    }\n    onFocus(e);\n  };\n\n  const handleChipRemove = (_: React.MouseEvent<HTMLInputElement>, value: ChipsInputValue) => {\n    removeOption(value);\n  };\n\n  const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (inputRef?.current !== null && !focused) {\n      inputRef.current.focus();\n    }\n  };\n\n  return (\n    <FormField\n      getRootRef={getRootRef}\n      vkuiClass={classNames('ChipsInput', `ChipsInput--sizeY-${sizeY}`, {\n        'ChipsInput--focused': focused,\n        'ChipsInput--withChips': !!selectedOptions.length,\n      })}\n      className={className}\n      style={style}\n      disabled={restProps.disabled}\n      after={after}\n      onClick={handleClick}\n      role=\"application\"\n      aria-disabled={restProps.disabled}\n      aria-readonly={restProps.readOnly}\n    >\n      <div vkuiClass=\"ChipsInput__container\" role=\"presentation\">\n        {selectedOptions.map((option: Option) => {\n          const value = getOptionValue(option);\n          const label = getOptionLabel(option);\n\n          return (\n            <React.Fragment key={value}>\n              {renderChip({ option, value, label, onRemove: handleChipRemove, disabled: restProps.disabled, className: prefixClass('ChipsInput__chip') })}\n            </React.Fragment>\n          );\n        })}\n        <label vkuiClass=\"ChipsInput__input-container\" aria-label={inputAriaLabel}>\n          <input\n            ref={inputRef}\n            value={fieldValue}\n            autoCapitalize=\"none\"\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            spellCheck={false}\n            aria-autocomplete=\"list\"\n            vkuiClass=\"ChipsInput__el\"\n            onChange={handleInputChange}\n            onKeyDown={handleKeyDown}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n            placeholder={selectedOptions.length ? null : placeholder}\n            {...restProps}\n          />\n        </label>\n      </div>\n    </FormField>\n  );\n};\n\nexport const chipsInputDefaultProps: ChipsInputProps<any> = {\n  type: 'text',\n  onChange: noop,\n  onInputChange: noop,\n  onKeyDown: noop,\n  onBlur: noop,\n  onFocus: noop,\n  value: [],\n  inputValue: '',\n  inputAriaLabel: 'Введите ваше значение...',\n  getOptionValue: (option: ChipsInputOption): ChipsInputValue => option.value,\n  getOptionLabel: (option: ChipsInputOption): string => option.label,\n  getNewOptionData: (_: ChipsInputValue, label: string): ChipsInputOption => ({ value: label, label }),\n  renderChip({ disabled, value, label, ...rest }: RenderChip<ChipsInputOption>) {\n    return (\n      <Chip value={value} removable={!disabled} {...rest}>\n        {label}\n      </Chip>\n    );\n  },\n};\nChipsInput.defaultProps = chipsInputDefaultProps;\n\nexport default ChipsInput;\n"],"file":"ChipsInput.js"}