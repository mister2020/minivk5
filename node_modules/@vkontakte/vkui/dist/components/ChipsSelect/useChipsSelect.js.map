{"version":3,"sources":["../../../src/components/ChipsSelect/useChipsSelect.ts"],"names":["React","useChipsInput","useChipsSelect","props","options","filterFn","getOptionLabel","getOptionValue","showSelected","useState","opened","setOpened","focusedOptionIndex","setFocusedOptionIndex","focusedOption","setFocusedOption","fieldValue","selectedOptions","chipsInputState","handleInputChange","e","filteredOptions","useMemo","filter","option","length","filteredSet","Set","selected","map","item","includes","delete"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ChipsInputOption } from '../ChipsInput/ChipsInput';\nimport { useChipsInput } from '../ChipsInput/useChipsInput';\nimport { ChipsSelectProps } from './ChipsSelect';\n\nexport const useChipsSelect = <Option extends ChipsInputOption>(props: Partial<ChipsSelectProps<Option>>) => {\n  const { options, filterFn, getOptionLabel, getOptionValue, showSelected } = props;\n\n  const [opened, setOpened] = React.useState(false);\n  const [focusedOptionIndex, setFocusedOptionIndex] = React.useState<number>(0);\n  const [focusedOption, setFocusedOption] = React.useState<Option>(null);\n\n  const { fieldValue, selectedOptions, ...chipsInputState } = useChipsInput(props);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    chipsInputState.handleInputChange(e);\n\n    if (!opened) {\n      setOpened(true);\n      setFocusedOptionIndex(0);\n    }\n  };\n\n  let filteredOptions = React.useMemo(() => {\n    return options.filter((option: Option) => filterFn(fieldValue, option, getOptionLabel));\n  }, [options, filterFn, fieldValue, getOptionLabel]);\n\n  filteredOptions = React.useMemo(() => {\n    if (!filteredOptions.length) {\n      return filteredOptions;\n    }\n\n    const filteredSet = new Set(filteredOptions);\n    const selected = selectedOptions.map((item) => getOptionValue(item));\n\n    for (const item of filteredSet) {\n      if (selected.includes(getOptionValue(item))) {\n        filteredSet.delete(item);\n      }\n    }\n\n    return [...filteredSet];\n  }, [showSelected, filteredOptions, selectedOptions]);\n\n  return {\n    ...chipsInputState, fieldValue, handleInputChange, opened, setOpened, filteredOptions,\n    focusedOptionIndex, setFocusedOptionIndex, focusedOption, setFocusedOption, selectedOptions,\n  };\n};\n"],"file":"useChipsSelect.js"}