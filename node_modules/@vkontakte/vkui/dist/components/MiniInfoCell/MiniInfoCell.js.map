{"version":3,"sources":["../../../src/components/MiniInfoCell/MiniInfoCell.tsx"],"names":["classNames","usePlatform","getClassName","Text","Tappable","hasReactNode","MiniInfoCell","props","platform","before","after","mode","textWrap","textLevel","children","restProps","isClickable","onClick","defaultProps"],"mappings":";;;;;AACA,SAASA,UAAT;AACA,SAASC,WAAT;AACA,SAASC,YAAT;AACA,OAAOC,IAAP;AACA,OAAOC,QAAP;AACA,SAASC,YAAT;AA4CA,OAAO,IAAMC,YAAyC,GAAG,SAA5CA,YAA4C,CAACC,KAAD,EAA8B;AAAA;;AACrF,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;;AACA,MACEQ,MADF,GAQIF,KARJ,CACEE,MADF;AAAA,MAEEC,KAFF,GAQIH,KARJ,CAEEG,KAFF;AAAA,MAGEC,IAHF,GAQIJ,KARJ,CAGEI,IAHF;AAAA,MAIEC,QAJF,GAQIL,KARJ,CAIEK,QAJF;AAAA,MAKEC,SALF,GAQIN,KARJ,CAKEM,SALF;AAAA,MAMEC,QANF,GAQIP,KARJ,CAMEO,QANF;AAAA,MAOKC,SAPL,4BAQIR,KARJ;;AAUA,MAAMS,WAAW,GAAG,CAAC,CAACD,SAAS,CAACE,OAAhC;AAEA,SACE,oBAAC,QAAD;AACE,IAAA,SAAS,EAAC,KADZ;AAEE,IAAA,QAAQ,EAAE,CAACD,WAFb;AAGE,IAAA,IAAI,EAAEA,WAAW,GAAG,QAAH,GAAc;AAHjC,KAIMD,SAJN;AAKE,IAAA,SAAS,EAAEf,UAAU,CAACE,YAAY,CAAC,cAAD,EAAiBM,QAAjB,CAAb,6EACEG,IADF,GACWA,IAAI,KAAK,MADpB,2DAEEC,QAFF,GAEeA,QAAQ,KAAK,QAF5B,6CAGGC,SAHH;AALvB,MAUE;AAAM,IAAA,SAAS,EAAC;AAAhB,KAAsCJ,MAAtC,CAVF,EAWE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,uBAAhB;AAAwC,IAAA,MAAM,EAAEE,IAAI,KAAK,MAAT,GAAkB,QAAlB,GAA6B;AAA7E,KACGG,QADH,CAXF,EAcGT,YAAY,CAACK,KAAD,CAAZ,IAAuB;AAAM,IAAA,SAAS,EAAC;AAAhB,KAAuCA,KAAvC,CAd1B,CADF;AAkBD,CAhCM;AAkCPJ,YAAY,CAACY,YAAb,GAA4B;AAC1BP,EAAAA,IAAI,EAAE,MADoB;AAE1BC,EAAAA,QAAQ,EAAE,QAFgB;AAG1BC,EAAAA,SAAS,EAAE;AAHe,CAA5B","sourcesContent":["import * as React from 'react';\nimport { classNames } from '../../lib/classNames';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { getClassName } from '../../helpers/getClassName';\nimport Text from '../Typography/Text/Text';\nimport Tappable from '../../components/Tappable/Tappable';\nimport { hasReactNode } from '../../lib/utils';\nimport './MiniInfoCell.css';\n\nexport interface MiniInfoCellProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Иконка слева.<br />\n   * Рекомендуется использовать иконки размера 20.\n   */\n  before: React.ReactNode;\n\n  /**\n   * Содержимое справа.<br />\n   * `<UsersStack size=\"s\" />` или `<Avatar size={24} />`\n   */\n  after?: React.ReactNode;\n\n  /**\n   * Тип ячейки:\n   *\n   * - `base` – базовая ячейка с серой иконкой и серым текстом.<br />\n   * В компонент можно передать `Link`, чтобы визуально сделать часть текста ссылкой.\n   * - `add` – тип ячейки, который показывает, что взаимодействие с ней должно вызывать действие добавления чего-то.\n   * - `more` – взаимодействие с такой ячейкой должно открывать какую-то подробную информацию.\n   */\n  mode?: 'base' | 'add' | 'more';\n\n  /**\n   * Тип отображения текста:\n   *\n   * - `nowrap` – в одну строку, текст не переносится и обрезается.\n   * - `short` – максимально отображается 3 строки, остальное обрезается.\n   * - `full` – текст отображается полностью.\n   */\n  textWrap?: 'nowrap' | 'short' | 'full';\n\n  /**\n   * Стиль текста:\n   *\n   * - `primary` – используйте этот стиль, если хотите выделить информацию в общем списке.<br />Пример использования: подробная информация на странице сообщества\n   * - `secondary` – стиль по-умолчанию.\n   */\n  textLevel?: 'primary' | 'secondary';\n}\n\nexport const MiniInfoCell: React.FC<MiniInfoCellProps> = (props: MiniInfoCellProps) => {\n  const platform = usePlatform();\n  const {\n    before,\n    after,\n    mode,\n    textWrap,\n    textLevel,\n    children,\n    ...restProps\n  } = props;\n\n  const isClickable = !!restProps.onClick;\n\n  return (\n    <Tappable\n      Component=\"div\"\n      disabled={!isClickable}\n      role={isClickable ? 'button' : null}\n      {...restProps}\n      vkuiClass={classNames(getClassName('MiniInfoCell', platform), {\n        [`MiniInfoCell--md-${mode}`]: mode !== 'base',\n        [`MiniInfoCell--wr-${textWrap}`]: textWrap !== 'nowrap',\n      }, `MiniInfoCell--lvl-${textLevel}`)}\n    >\n      <span vkuiClass=\"MiniInfoCell__icon\">{before}</span>\n      <Text vkuiClass=\"MiniInfoCell__content\" weight={mode === 'more' ? 'medium' : 'regular'}>\n        {children}\n      </Text>\n      {hasReactNode(after) && <span vkuiClass=\"MiniInfoCell__after\">{after}</span>}\n    </Tappable>\n  );\n};\n\nMiniInfoCell.defaultProps = {\n  mode: 'base',\n  textWrap: 'nowrap',\n  textLevel: 'secondary',\n};\n"],"file":"MiniInfoCell.js"}