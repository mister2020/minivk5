import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children", "className", "header", "text", "style", "iosCloseItem"];
import { createScopedElement } from "../../lib/jsxRuntime";
import * as React from 'react';
import { PopoutWrapper } from "../PopoutWrapper/PopoutWrapper";
import { ViewWidth, ViewHeight } from "../../hoc/withAdaptivity";
import { IOS } from "../../lib/platform";
import { ActionSheetDropdownDesktop } from "./ActionSheetDropdownDesktop";
import { ActionSheetDropdown } from "./ActionSheetDropdown";
import { hasReactNode } from "../../lib/utils";
import { ActionSheetContext } from "./ActionSheetContext";
import Caption from "../Typography/Caption/Caption";
import { usePlatform } from "../../hooks/usePlatform";
import { useTimeout } from "../../hooks/useTimeout";
import { useAdaptivity } from "../../hooks/useAdaptivity";
import { useObjectMemo } from "../../hooks/useObjectMemo";
export var ActionSheet = function ActionSheet(_ref) {
  var children = _ref.children,
      className = _ref.className,
      header = _ref.header,
      text = _ref.text,
      style = _ref.style,
      iosCloseItem = _ref.iosCloseItem,
      restProps = _objectWithoutProperties(_ref, _excluded);

  var platform = usePlatform();

  var _React$useState = React.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      closing = _React$useState2[0],
      setClosing = _React$useState2[1];

  var onClose = function onClose() {
    return setClosing(true);
  };

  var _React$useState3 = React.useState(),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      _closeAction = _React$useState4[0],
      setCloseAction = _React$useState4[1];

  var afterClose = function afterClose() {
    restProps.onClose();
    _closeAction && _closeAction();
    setCloseAction(undefined);
  };

  var _useAdaptivity = useAdaptivity(),
      viewWidth = _useAdaptivity.viewWidth,
      viewHeight = _useAdaptivity.viewHeight,
      hasMouse = _useAdaptivity.hasMouse;

  var isDesktop = viewWidth >= ViewWidth.SMALL_TABLET && (hasMouse || viewHeight >= ViewHeight.MEDIUM);
  var fallbackTransitionFinish = useTimeout(afterClose, platform === IOS ? 300 : 200);
  React.useEffect(function () {
    if (closing) {
      if (isDesktop) {
        afterClose();
      } else {
        fallbackTransitionFinish.set();
      }
    } else {
      fallbackTransitionFinish.clear();
    }
  }, [closing]);
  var onItemClick = React.useCallback(function (action, autoclose) {
    return function (event) {
      event.persist();

      if (autoclose) {
        setCloseAction(function () {
          return action && action(event);
        });
        setClosing(true);
      } else {
        action && action(event);
      }
    };
  }, []);
  var contextValue = useObjectMemo({
    onItemClick: onItemClick,
    isDesktop: isDesktop
  });
  var DropdownComponent = isDesktop ? ActionSheetDropdownDesktop : ActionSheetDropdown;
  return createScopedElement(PopoutWrapper, {
    closing: closing,
    alignY: "bottom",
    className: className,
    style: style,
    onClick: !isDesktop ? onClose : null,
    hasMask: !isDesktop,
    fixed: !isDesktop
  }, createScopedElement(ActionSheetContext.Provider, {
    value: contextValue
  }, createScopedElement(DropdownComponent, _extends({
    closing: closing,
    onClose: onClose,
    onTransitionEnd: closing && !isDesktop ? afterClose : null
  }, restProps), (hasReactNode(header) || hasReactNode(text)) && createScopedElement("header", {
    vkuiClass: "ActionSheet__header"
  }, hasReactNode(header) && createScopedElement(Caption, {
    level: "1",
    weight: platform === IOS ? 'semibold' : 'medium',
    vkuiClass: "ActionSheet__title"
  }, header), hasReactNode(text) && createScopedElement(Caption, {
    level: "1",
    weight: "regular",
    vkuiClass: "ActionSheet__text"
  }, text)), children, platform === IOS && !isDesktop && iosCloseItem)));
};
ActionSheet.defaultProps = {
  popupDirection: 'bottom'
};
//# sourceMappingURL=ActionSheet.js.map