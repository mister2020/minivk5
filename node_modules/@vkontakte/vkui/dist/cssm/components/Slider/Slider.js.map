{"version":3,"sources":["../../../../src/components/Slider/Slider.tsx"],"names":["React","clamp","UniversalSlider","Slider","onChange","defaultValue","props","isControlled","value","useState","min","localValue","setValue","max","handleChange","useCallback","nextValue","event","disabled","rangeValue","useMemo","defaultProps","step"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,KAAT;AACA,SAASC,eAAT;;AAIA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAAuD;AAAA,MAApDC,QAAoD,QAApDA,QAAoD;AAAA,MAA1CC,YAA0C,QAA1CA,YAA0C;AAAA,MAAzBC,KAAyB;;AACpE,MAAMC,YAAY,GAAGD,KAAK,CAACE,KAAN,IAAe,IAApC;;AAEA,wBAA+BR,KAAK,CAACS,QAAN,CAAeJ,YAAY,IAAI,IAAhB,GAAuBC,KAAK,CAACI,GAA7B,GAAmCL,YAAlD,CAA/B;AAAA;AAAA,MAAOM,UAAP;AAAA,MAAmBC,QAAnB;;AACA,MAAMJ,KAAK,GAAGP,KAAK,CAACM,YAAY,GAAGD,KAAK,CAACE,KAAT,GAAiBG,UAA9B,EAA0CL,KAAK,CAACI,GAAhD,EAAqDJ,KAAK,CAACO,GAA3D,CAAnB;AAEA,MAAMC,YAA8D,GAAGd,KAAK,CAACe,WAAN,CAAkB,UAACC,SAAD,EAAYC,KAAZ,EAAsB;AAC7G,QAAIX,KAAK,CAACY,QAAN,IAAkBV,KAAK,KAAKQ,SAAS,CAAC,CAAD,CAAzC,EAA8C;AAC5C;AACD;;AACD,KAACT,YAAD,IAAiBK,QAAQ,CAACI,SAAS,CAAC,CAAD,CAAV,CAAzB;AACAZ,IAAAA,QAAQ,IAAIA,QAAQ,CAACY,SAAS,CAAC,CAAD,CAAV,EAAeC,KAAf,CAApB;AACD,GANsE,EAMpE,CAACb,QAAD,EAAWG,YAAX,EAAyBC,KAAzB,CANoE,CAAvE;AAQA,MAAMW,UAA0B,GAAGnB,KAAK,CAACoB,OAAN,CAAc;AAAA,WAAM,CAAC,IAAD,EAAOZ,KAAP,CAAN;AAAA,GAAd,EAAmC,CAACA,KAAD,CAAnC,CAAnC;AACA,SAAO,oBAAC,eAAD,eAAqBF,KAArB;AAA4B,IAAA,KAAK,EAAEa,UAAnC;AAA+C,IAAA,QAAQ,EAAEL;AAAzD,KAAP;AACD,CAhBD;;AAkBAX,MAAM,CAACkB,YAAP,GAAsB;AACpBX,EAAAA,GAAG,EAAE,CADe;AAEpBG,EAAAA,GAAG,EAAE,GAFe;AAGpBS,EAAAA,IAAI,EAAE;AAHc,CAAtB;AAMA,eAAenB,MAAf","sourcesContent":["import * as React from 'react';\nimport { clamp } from '../../helpers/math';\nimport { UniversalSlider, UniversalSliderProps, UniversalValue } from '../RangeSlider/UniversalSlider';\n\nexport type SliderProps = UniversalSliderProps<number>;\n\nconst Slider = ({ onChange, defaultValue, ...props }: SliderProps) => {\n  const isControlled = props.value != null;\n\n  const [localValue, setValue] = React.useState(defaultValue == null ? props.min : defaultValue);\n  const value = clamp(isControlled ? props.value : localValue, props.min, props.max);\n\n  const handleChange: UniversalSliderProps<UniversalValue>['onChange'] = React.useCallback((nextValue, event) => {\n    if (props.disabled || value === nextValue[1]) {\n      return;\n    }\n    !isControlled && setValue(nextValue[1]);\n    onChange && onChange(nextValue[1], event);\n  }, [onChange, isControlled, value]);\n\n  const rangeValue: [null, number] = React.useMemo(() => [null, value], [value]);\n  return <UniversalSlider {...props} value={rangeValue} onChange={handleChange} />;\n};\n\nSlider.defaultProps = {\n  min: 0,\n  max: 100,\n  step: 0,\n};\n\nexport default Slider;\n"],"file":"Slider.js"}