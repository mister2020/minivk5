{"version":3,"sources":["../../../../src/components/AppRoot/AppRootPortal.tsx"],"names":["React","createPortal","AppRootContext","AppRootPortal","children","className","useContext","portalRoot","embedded"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,cAAT;AAEA,OAAO,IAAMC,aAAwE,GAAG,SAA3EA,aAA2E,OAA6B;AAAA,MAA1BC,QAA0B,QAA1BA,QAA0B;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;;AACnH,0BAAiCL,KAAK,CAACM,UAAN,CAAiBJ,cAAjB,CAAjC;AAAA,MAAQK,UAAR,qBAAQA,UAAR;AAAA,MAAoBC,QAApB,qBAAoBA,QAApB;;AACA,SAAOA,QAAQ,IAAID,UAAZ,gBACHN,YAAY,CAAE;AAAK,IAAA,SAAS,EAAEI;AAAhB,KAA4BD,QAA5B,CAAF,EAAgDG,UAAhD,CADT,GAEH,oBAAC,KAAD,CAAO,QAAP,QAAiBH,QAAjB,CAFJ;AAGD,CALM","sourcesContent":["import * as React from 'react';\nimport { createPortal } from 'react-dom';\nimport { AppRootContext } from './AppRootContext';\n\nexport const AppRootPortal: React.FC<React.PropsWithChildren<{ className?: string }>> = ({ children, className }) => {\n  const { portalRoot, embedded } = React.useContext(AppRootContext);\n  return embedded && portalRoot\n    ? createPortal((<div className={className}>{children}</div>), portalRoot)\n    : <React.Fragment>{children}</React.Fragment>;\n};\n"],"file":"AppRootPortal.js"}