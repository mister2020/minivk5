{"version":3,"sources":["../../../src/hooks/useGlobalEventListener.ts"],"names":["React","useEventListener","useGlobalEventListener","element","event","cb","options","listener","useEffect","add","remove","Boolean"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT;AAcA,OAAO,SAASC,sBAAT,CAAgCC,OAAhC,EAA8CC,KAA9C,EAA6DC,EAA7D,EAAqFC,OAArF,EAAwH;AAC7H,MAAMC,QAAQ,GAAGN,gBAAgB,CAACG,KAAD,EAAQC,EAAR,EAAYC,OAAZ,CAAjC;AACAN,EAAAA,KAAK,CAACQ,SAAN,CAAgB;AAAA,WAAMH,EAAE,GAAGE,QAAQ,CAACE,GAAT,CAAaN,OAAb,CAAH,GAA2BI,QAAQ,CAACG,MAAT,EAAnC;AAAA,GAAhB,EAAsE,CAACC,OAAO,CAACN,EAAD,CAAR,CAAtE;AACD","sourcesContent":["import * as React from 'react';\nimport { useEventListener } from './useEventListener';\n\nexport function useGlobalEventListener<K extends keyof GlobalEventHandlersEventMap>(\n  element: HTMLElement | HTMLDocument | Window,\n  event: K,\n  cb: false | null | ((ev: GlobalEventHandlersEventMap[K]) => any),\n  options?: AddEventListenerOptions,\n): void;\nexport function useGlobalEventListener(\n  element: HTMLElement | HTMLDocument | Window,\n  event: string,\n  cb: false | null | ((ev: Event) => any),\n  options?: AddEventListenerOptions,\n): void;\nexport function useGlobalEventListener(element: any, event: string, cb: (ev: Event) => any, options?: AddEventListenerOptions) {\n  const listener = useEventListener(event, cb, options);\n  React.useEffect(() => cb ? listener.add(element) : listener.remove(), [Boolean(cb)]);\n}\n"],"file":"useGlobalEventListener.js"}